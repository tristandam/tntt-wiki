"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[6244],{30664:function(e,n,a){a.r(n),a.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var t=a(83117),r=a(80102),s=(a(67294),a(3905)),i=a(85317),l=["components"],o={title:"Examples",description:"Official IOTA Wallet Library Software Rust examples.",image:"/img/logo/wallet_light.png",keywords:["account","event","Rust","transfer","backup"]},c=void 0,u={unversionedId:"libraries/rust/examples",id:"libraries/rust/examples",title:"Examples",description:"Official IOTA Wallet Library Software Rust examples.",source:"@site/external/wallet.rs/documentation/docs/libraries/rust/examples.mdx",sourceDirName:"libraries/rust",slug:"/libraries/rust/examples",permalink:"/wallet.rs/libraries/rust/examples",editUrl:"https://github.com/iotaledger/wallet.rs/edit/mainnet/external/wallet.rs/documentation/docs/libraries/rust/examples.mdx",tags:[],version:"current",frontMatter:{title:"Examples",description:"Official IOTA Wallet Library Software Rust examples.",image:"/img/logo/wallet_light.png",keywords:["account","event","Rust","transfer","backup"]},sidebar:"docs",previous:{title:"getting_started",permalink:"/wallet.rs/libraries/rust/getting_started"},next:{title:"api_reference",permalink:"/wallet.rs/libraries/rust/api_reference"}},p={},d=[{value:"Backup and Restore Example",id:"backup-and-restore-example",level:2},{value:"Transfer Example:",id:"transfer-example",level:2},{value:"Events example:",id:"events-example",level:2},{value:"Logger example:",id:"logger-example",level:2}],g={toc:d};function m(e){var n=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"You can see the examples in the library's ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/tree/dev/examples"},"examples directory"),".\nYou can list all available examples by running the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --example # lists the available examples\n")),(0,s.kt)("p",null,"To run an example, you can use the following command, replacing ",(0,s.kt)("em",{parentName:"p"},"transfer")," with the desired example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --example transfer # execute the `transfer` example\n")),(0,s.kt)("h2",{id:"backup-and-restore-example"},"Backup and Restore Example"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create an account manager and set a password:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let manager = AccountManager::builder().finish().await.unwrap();\n\nmanager.set_stronghold_password("password").await.unwrap();\nmanager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n\n')),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Create your account:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let client_options = ClientOptionsBuilder::new()\n    .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n    .build()\n    .unwrap();\nlet account_handle = manager\n    .create_account(client_options)?\n    .alias("alias")\n    .initialise()\n    .await?;\nlet id = account_handle.id().await;\n\n')),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"You can secure your account in a backup file:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// backup the stored accounts to ./backup/${backup_name}\nlet backup_path = manager.backup("./backup").await?;\n\n')),(0,s.kt)("ol",{start:4},(0,s.kt)("li",{parentName:"ol"},"You can import the backup later, or in another application using the following snippet:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'manager.import_accounts(backup_path, "password").await?;\n\nlet imported_account_handle = manager.get_account(&id).await?;\n\nlet account = account_handle.read().await;\nlet imported_account = imported_account_handle.read().await;\n\n')),(0,s.kt)("p",null,"That's it! You can now backup and restore your account!"),(0,s.kt)("p",null,"You can see the full code for the example in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/blob/develop/examples/backup_and_restore.rs"},(0,s.kt)("inlineCode",{parentName:"a"},"wallet.rs")," repository")),(0,s.kt)("h2",{id:"transfer-example"},"Transfer Example:"),(0,s.kt)("p",null,"You use the following example to generate an account, and transfer funds. "),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! cargo run --example transfer --release\r\n\r\nuse iota_wallet::{\r\n    account_manager::AccountManager,\r\n    address::{parse, OutputKind},\r\n    client::ClientOptionsBuilder,\r\n    message::Transfer,\r\n    signing::SignerType,\r\n};\r\nuse std::num::NonZeroU64;\r\n\r\n#[tokio::main]\r\nasync fn main() -> iota_wallet::Result<()> {\r\n    let manager = AccountManager::builder().finish().await.unwrap();\r\n    manager.set_stronghold_password("password").await.unwrap();\r\n\r\n    // Get account or create a new one\r\n    let account_alias = "alias";\r\n    let account = match manager.get_account(account_alias).await {\r\n        Ok(account) => account,\r\n        _ => {\r\n            // first we\'ll create an example account and store it\r\n            manager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\r\n            let client_options = ClientOptionsBuilder::new()\r\n                .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\r\n                .build()\r\n                .unwrap();\r\n            manager\r\n                .create_account(client_options)?\r\n                .alias(account_alias)\r\n                .initialise()\r\n                .await?\r\n        }\r\n    };\r\n\r\n    let address = account.generate_address().await?;\r\n    println!(\r\n        "Send iotas from the faucet to {} and press enter after the transaction got confirmed",\r\n        address.address().to_bech32()\r\n    );\r\n    let mut input = String::new();\r\n    std::io::stdin().read_line(&mut input).unwrap();\r\n    println!("Sending transfer...");\r\n    let message = account\r\n        .transfer(\r\n            Transfer::builder(\r\n                parse("atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r")?,\r\n                NonZeroU64::new(10000000).unwrap(),\r\n                Some(OutputKind::SignatureLockedDustAllowance),\r\n            )\r\n            .finish(),\r\n        )\r\n        .await?;\r\n    println!("Message sent: {}", message.id());\r\n\r\n    Ok(())\r\n}\r\n'),(0,s.kt)("h2",{id:"events-example"},"Events example:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library is able to listen to several supported event. As soon as the event occurs, a provided callback will be triggered."),(0,s.kt)("p",null,"You can use the following example to fetch an existing ",(0,s.kt)("em",{parentName:"p"},"Account")," and listen to transaction events related to that ",(0,s.kt)("em",{parentName:"p"},"Account")," :"),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2021 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! cargo run --example event --release\r\nuse iota_wallet::{\r\n    account::AccountHandle, account_manager::AccountManager, address::Address, client::ClientOptionsBuilder,\r\n    event::on_balance_change, signing::SignerType, Error, Result,\r\n};\r\nuse reqwest::Client;\r\nuse std::collections::HashMap;\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n    let stronghold_password = "password".to_string();\r\n    let account_alias = "alice".to_string();\r\n    let node_url = "https://api.lb-1.h.chrysalis-devnet.iota.cafe/".to_string();\r\n    let faucet_url = "https://faucet.chrysalis-devnet.iota.cafe".to_string();\r\n\r\n    let account_manager: AccountManager = AccountManager::builder().finish().await?;\r\n    account_manager.set_stronghold_password(stronghold_password).await?;\r\n\r\n    // If no account was previously created, we create one. Otherwise, recover from local storage\r\n    // This ensures that the script can be run multiple times\r\n    let account: AccountHandle = match account_manager.get_account(&account_alias).await {\r\n        Ok(account) => account,\r\n        _ => {\r\n            account_manager.store_mnemonic(SignerType::Stronghold, None).await?;\r\n\r\n            let client_options = ClientOptionsBuilder::new().with_node(&node_url)?.build()?;\r\n            account_manager\r\n                .create_account(client_options)?\r\n                .alias(account_alias)\r\n                .initialise()\r\n                .await?\r\n        }\r\n    };\r\n\r\n    // Possible events are: on_balance_change, on_broadcast, on_confirmation_state_change, on_error,\r\n    // on_migration_progress, on_new_transaction, on_reattachment, on_stronghold_status_change,\r\n    // on_transfer_progress,\r\n    on_balance_change(move |event| {\r\n        println!("BalanceEvent: {:?}", event);\r\n        println!("Press enter to exit");\r\n    })\r\n    .await;\r\n\r\n    let address = account.generate_address().await?;\r\n    println!("Requesting funds from the faucet to {}", address.address().to_bech32());\r\n    get_funds(&address, &faucet_url).await?;\r\n\r\n    // Wait for event before exit\r\n    let mut exit = String::new();\r\n    std::io::stdin().read_line(&mut exit).unwrap();\r\n    Ok(())\r\n}\r\n\r\n// Requests a testnet funds transaction to our generated address\r\n// This API is rate limited: only a request every minute is allowed\r\nasync fn get_funds(address: &Address, faucet_url: &str) -> Result<()> {\r\n    let mut body = HashMap::new();\r\n    body.insert("address", address.address().to_bech32());\r\n\r\n    let faucet_response = Client::new()\r\n        .post(format!("{}/api/plugins/faucet/enqueue", faucet_url))\r\n        .json(&body)\r\n        .send()\r\n        .await\r\n        .map_err(|e| Error::ClientError(Box::new(e.into())))?;\r\n\r\n    println!(\r\n        "{}",\r\n        faucet_response\r\n            .text()\r\n            .await\r\n            .map_err(|e| Error::ClientError(Box::new(e.into())))?\r\n    );\r\n\r\n    println!("Requested funds");\r\n\r\n    Ok(())\r\n}\r\n'),(0,s.kt)("h2",{id:"logger-example"},"Logger example:"),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! cargo run --example logger --release\r\n\r\nuse iota_client::common::logger::{logger_init, LoggerConfig, LoggerOutputConfigBuilder};\r\nuse iota_wallet::{account_manager::AccountManager, client::ClientOptionsBuilder, signing::SignerType};\r\nuse log::LevelFilter;\r\nuse std::time::Instant;\r\n\r\n#[tokio::main]\r\nasync fn main() -> iota_wallet::Result<()> {\r\n    // Generates a wallet.log file with logs for debugging\r\n    let output_config = LoggerOutputConfigBuilder::new()\r\n        .name("wallet.log")\r\n        .level_filter(LevelFilter::Debug);\r\n    let config = LoggerConfig::build().with_output(output_config).finish();\r\n    logger_init(config).unwrap();\r\n\r\n    let manager = AccountManager::builder()\r\n        .with_storage("./backup", None)?\r\n        .with_skip_polling()\r\n        .finish()\r\n        .await?;\r\n    manager.set_stronghold_password("password").await?;\r\n\r\n    // Get account or create a new one\r\n    let account_alias = "logger";\r\n    let account = match manager.get_account(account_alias).await {\r\n        Ok(account) => account,\r\n        _ => {\r\n            // first we\'ll create an example account and store it\r\n            manager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\r\n            let client_options = ClientOptionsBuilder::new()\r\n                .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\r\n                .build()\r\n                .unwrap();\r\n            manager\r\n                .create_account(client_options)?\r\n                .alias(account_alias)\r\n                .initialise()\r\n                .await?\r\n        }\r\n    };\r\n\r\n    let now = Instant::now();\r\n    account.sync().await.execute().await?;\r\n    println!("Syncing took: {:.2?}", now.elapsed());\r\n\r\n    println!("Balance: {:?}", account.balance().await?);\r\n\r\n    let addresses = account.list_unspent_addresses().await?;\r\n    println!("Addresses: {}", addresses.len());\r\n\r\n    let address = account.generate_address().await?;\r\n    println!("Generated a new address: {:?}", address);\r\n\r\n    Ok(())\r\n}\r\n'))}m.isMDXComponent=!0}}]);