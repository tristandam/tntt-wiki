"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[80826],{90293:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return s}});var n=a(83117),r=a(80102),l=(a(67294),a(3905)),i=["components"],p={description:"This section describes the configuration parameters and their types for your Hornet node.",image:"/img/logo/HornetLogo.png",keywords:["IOTA Node","Hornet Node","Configuration","JSON","Customize","Config","reference"]},o=void 0,m={unversionedId:"post_installation/configuration",id:"post_installation/configuration",title:"configuration",description:"This section describes the configuration parameters and their types for your Hornet node.",source:"@site/external/hornet/documentation/docs/post_installation/configuration.md",sourceDirName:"post_installation",slug:"/post_installation/configuration",permalink:"/hornet/post_installation/configuration",editUrl:"https://github.com/gohornet/hornet/edit/mainnet/external/hornet/documentation/docs/post_installation/configuration.md",tags:[],version:"current",frontMatter:{description:"This section describes the configuration parameters and their types for your Hornet node.",image:"/img/logo/HornetLogo.png",keywords:["IOTA Node","Hornet Node","Configuration","JSON","Customize","Config","reference"]},sidebar:"mySidebar",previous:{title:"managing_a_node",permalink:"/hornet/post_installation/managing_a_node"},next:{title:"peering",permalink:"/hornet/post_installation/peering"}},d={},s=[{value:"1. REST API",id:"1-rest-api",level:2},{value:"JWT Auth",id:"jwt-auth",level:3},{value:"Limits",id:"limits",level:3},{value:"2. Dashboard",id:"2-dashboard",level:2},{value:"Auth",id:"auth",level:3},{value:"3. DB",id:"3-db",level:2},{value:"4. Snapshots",id:"4-snapshots",level:2},{value:"DownloadURLs",id:"downloadurls",level:3},{value:"5. Pruning",id:"5-pruning",level:2},{value:"Milestones",id:"milestones",level:3},{value:"Size",id:"size",level:3},{value:"6. Protocol",id:"6-protocol",level:2},{value:"PublicKeyRanges",id:"publickeyranges",level:3},{value:"7. Proof of Work",id:"7-proof-of-work",level:2},{value:"8. Requests",id:"8-requests",level:2},{value:"9. Coordinator",id:"9-coordinator",level:2},{value:"Checkpoints",id:"checkpoints",level:3},{value:"Tipsel",id:"tipsel",level:3},{value:"Signing",id:"signing",level:3},{value:"Quorum",id:"quorum",level:3},{value:"Groups",id:"groups",level:4},{value:"{GROUP_NAME}",id:"group_name",level:5},{value:"10. Migrator",id:"10-migrator",level:2},{value:"11. Receipts",id:"11-receipts",level:2},{value:"Backup",id:"backup",level:3},{value:"Validator",id:"validator",level:3},{value:"Api",id:"api",level:4},{value:"Coordinator",id:"coordinator",level:4},{value:"12. Tangle",id:"12-tangle",level:2},{value:"13. Tipsel",id:"13-tipsel",level:2},{value:"NonLazy",id:"nonlazy",level:3},{value:"SemiLazy",id:"semilazy",level:3},{value:"14. Node",id:"14-node",level:2},{value:"15. P2P",id:"15-p2p",level:2},{value:"ConnectionManager",id:"connectionmanager",level:3},{value:"Gossip",id:"gossip",level:3},{value:"Database",id:"database",level:3},{value:"Autopeering",id:"autopeering",level:3},{value:"16. Logger",id:"16-logger",level:2},{value:"17. Warpsync",id:"17-warpsync",level:2},{value:"18. Spammer",id:"18-spammer",level:2},{value:"19. Faucet",id:"19-faucet",level:2},{value:"Website",id:"website",level:3},{value:"20. MQTT",id:"20-mqtt",level:2},{value:"21. Profiling",id:"21-profiling",level:2},{value:"22. Prometheus",id:"22-prometheus",level:2},{value:"FileServiceDiscovery",id:"fileservicediscovery",level:3},{value:"23. Debug",id:"23-debug",level:2}],k={toc:s};function g(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"core-configuration"},"Core Configuration"),(0,l.kt)("p",null,"Hornet uses a JSON standard format as a config file. If you are unsure about JSON syntax, you can find more information in the ",(0,l.kt)("a",{parentName:"p",href:"https://www.json.org"},"official JSON specs"),"."),(0,l.kt)("p",null,"The default config file is ",(0,l.kt)("inlineCode",{parentName:"p"},"config.json"),". You can change the path or name of the config file by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"-c")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"--config")," argument while executing ",(0,l.kt)("inlineCode",{parentName:"p"},"hornet")," executable."),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hornet -c config_example.json\n")),(0,l.kt)("p",null,"You can always get the most up-to-date description of the config parameters by running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hornet -h --full\n")),(0,l.kt)("h2",{id:"1-rest-api"},"1. REST API"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the REST API listens on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#jwt-auth"},"jwtAuth")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Config for JWT auth"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"publicRoutes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The HTTP REST routes which can be called without authorization. Wildcards using * are allowed."),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"protectedRoutes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The HTTP REST routes which need to be called with authorization. Wildcards using * are allowed."),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"powEnabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the node does PoW if messages are received via API"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"powWorkerCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of workers used for calculating PoW when issuing messages via API"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#limits"},"limits")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for api limits"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"jwt-auth"},"JWT Auth"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"salt"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Salt used inside the JWT tokens for the REST API. Change this to a different value to invalidate JWT tokens not matching this new value"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"limits"},"Limits"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bodyLength"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum number of characters that the body of an API call may contain"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxResults"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum number of results that may be returned by an endpoint"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "restAPI": {\n    "bindAddress": "0.0.0.0:14265",\n    "jwtAuth": {\n      "salt": "HORNET"\n    },\n    "publicRoutes": [\n      "/health",\n      "/mqtt",\n      "/api/v1/info",\n      "/api/v1/tips",\n      "/api/v1/messages*",\n      "/api/v1/transactions*",\n      "/api/v1/milestones*",\n      "/api/v1/outputs*",\n      "/api/v1/addresses*",\n      "/api/v1/treasury",\n      "/api/v1/receipts*"\n    ],\n    "protectedRoutes": [\n      "/api/v1/*",\n      "/api/plugins/*"\n    ],\n    "powEnabled": true,\n    "powWorkerCount": 1,\n    "limits": {\n      "bodyLength": "1M",\n      "maxResults": 1000\n    }\n  },\n')),(0,l.kt)("h2",{id:"2-dashboard"},"2. Dashboard"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the dashboard can be accessed from"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"dev"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to run the dashboard in dev mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#auth"},"auth")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for dashboard auth"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"auth"},"Auth"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"sessionTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"How long the auth session should last before expiring"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"username"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The auth username (max 25 chars)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"passwordHash"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The auth password+salt as a scrypt hash"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"passwordSalt"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The auth salt used for hashing the password"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "dashboard": {\n    "bindAddress": "localhost:8081",\n    "dev": false,\n    "auth": {\n      "sessionTimeout": "72h",\n      "username": "admin",\n      "passwordHash": "0000000000000000000000000000000000000000000000000000000000000000",\n      "passwordSalt": "0000000000000000000000000000000000000000000000000000000000000000"\n    }\n  },\n')),(0,l.kt)("h2",{id:"3-db"},"3. DB"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"engine"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The used database engine (pebble/rocksdb/mapdb)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"path"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The path to the database folder"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"autoRevalidation"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to automatically start revalidation on startup if the database is corrupted"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "db": {\n    "engine": "rocksdb",\n    "path": "mainnetdb",\n    "autoRevalidation": false\n  },\n')),(0,l.kt)("h2",{id:"4-snapshots"},"4. Snapshots"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"depth"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The depth, respectively the starting point, at which a snapshot of the ledger is generated"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"interval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Interval, in milestones, at which snapshot files are created (snapshots are only created if the node is synced)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"fullPath"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Path to the full snapshot file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"deltaPath"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Path to the delta snapshot file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"deltaSizeThresholdPercentage"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Create a full snapshot if the size of a delta snapshot reaches a certain percentage of the full snapshot  (0.0 = always create delta snapshot to keep ms diff history)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#downloadurls"},"downloadURLs")),(0,l.kt)("td",{parentName:"tr",align:"left"},"URLs to load the snapshot files from."),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of objects")))),(0,l.kt)("h3",{id:"downloadurls"},"DownloadURLs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"full"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Download link to the full snapshot file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"delta"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Download link to the delta snapshot file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "snapshots": {\n    "depth": 50,\n    "interval": 200,\n    "fullPath": "snapshots/mainnet/full_snapshot.bin",\n    "deltaPath": "snapshots/mainnet/delta_snapshot.bin",\n    "deltaSizeThresholdPercentage": 50.0,\n    "downloadURLs": [\n      {\n        "full": "https://source1.example.com/full_snapshot.bin",\n        "delta": "https://source1.example.com/delta_snapshot.bin"\n      },\n      {\n        "full": "https://source2.example.com/full_snapshot.bin",\n        "delta": "https://source2.example.com/delta_snapshot.bin"\n      }\n    ]\n  },\n')),(0,l.kt)("h2",{id:"5-pruning"},"5. Pruning"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#Milestones"},"milestones")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Milestones based pruning"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#Size"},"size")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Database size based pruning"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"pruneReceipts"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to delete old receipts data from the database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("h3",{id:"milestones"},"Milestones"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to delete old message data from the database based on maximum milestones to keep"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxMilestonesToKeep"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Maximum amount of milestone cones to keep in the database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("h3",{id:"size"},"Size"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to delete old message data from the database based on maximum database size"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"targetSize"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Target size of the database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"thresholdPercentage"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The percentage the database size gets reduced if the target size is reached"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"cooldownTime"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Cool down time between two pruning by database size events"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "pruning": {\n    "milestones": {\n      "enabled": false,\n      "maxMilestonesToKeep": 60480\n    },\n    "size": {\n      "enabled": true,\n      "targetSize": "30GB",\n      "thresholdPercentage": 10.0,\n      "cooldownTime": "5m"\n    },\n    "pruneReceipts": false\n  },\n')),(0,l.kt)("h2",{id:"6-protocol"},"6. Protocol"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"networkID"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The network ID on which this node operates on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bech32HRP"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The HRP which should be used for Bech32 addresses"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"minPoWScore"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The minimum PoW score required by the network"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"milestonePublicKeyCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of public keys in a milestone"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#publickeyranges"},"publicKeyRanges")),(0,l.kt)("td",{parentName:"tr",align:"left"},"List of public key ranges from the coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of objects")))),(0,l.kt)("h3",{id:"publickeyranges"},"PublicKeyRanges"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"key"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Public key"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"start"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Milestone start index"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"end"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Milestone end index"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "protocol": {\n    "networkID": "chrysalis-mainnet",\n    "bech32HRP": "iota",\n    "minPoWScore": 4000.0,\n    "milestonePublicKeyCount": 2,\n    "publicKeyRanges": [\n      {\n        "key": "a9b46fe743df783dedd00c954612428b34241f5913cf249d75bed3aafd65e4cd",\n        "start": 0,\n        "end": 777600\n      },\n      {\n        "key": "365fb85e7568b9b32f7359d6cbafa9814472ad0ecbad32d77beaf5dd9e84c6ba",\n        "start": 0,\n        "end": 1555200\n      },\n      {\n        "key": "ba6d07d1a1aea969e7e435f9f7d1b736ea9e0fcb8de400bf855dba7f2a57e947",\n        "start": 552960,\n        "end": 2108160\n      }\n    ]\n  },\n')),(0,l.kt)("h2",{id:"7-proof-of-work"},"7. Proof of Work"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"refreshTipsInterval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Interval for refreshing tips during PoW for spammer messages and messages passed without parents via API"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "pow": {\n    "refreshTipsInterval": "5s"\n  },\n')),(0,l.kt)("h2",{id:"8-requests"},"8. Requests"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"discardOlderThan"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum time a request stays in the request queue"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"pendingReEnqueueInterval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The interval the pending requests are re-enqueued"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "requests": {\n    "discardOlderThan": "15s",\n    "pendingReEnqueueInterval": "5s"\n  },\n')),(0,l.kt)("h2",{id:"9-coordinator"},"9. Coordinator"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"stateFilePath"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The path to the state file of the coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"interval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The interval milestones are issued"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"powWorkerCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of workers used for calculating PoW when issuing checkpoints and milestones"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#checkpoints"},"checkpoints")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for checkpoints"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#tipsel"},"tipsel")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for tip selection"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#signing"},"signing")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for signing"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#quorum"},"quorum")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for quorum"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"checkpoints"},"Checkpoints"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxTrackedMessages"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Maximum amount of known messages for milestone tip selection"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("h3",{id:"tipsel"},"Tipsel"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"minHeaviestBranchUnreferencedMessagesThreshold"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Minimum threshold of unreferenced messages in the heaviest branch"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxHeaviestBranchTipsPerCheckpoint"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Maximum amount of checkpoint messages with heaviest branch tips"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"randomTipsPerCheckpoint"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Amount of checkpoint messages with random tips"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"heaviestBranchSelectionTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum duration to select the heaviest branch tips"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"signing"},"Signing"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"provider"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The signing provider the coordinator uses to sign a milestone (local/remote)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"remoteAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The address of the remote signing provider (insecure connection!)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"retryAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of signing retries to perform before shutting down the node"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"retryTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The timeout between signing retries"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"quorum"},"Quorum"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the coordinator quorum is enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#groups"},"groups")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The quorum groups used to ask other nodes for correct ledger state of the coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of object arrays")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The timeout until a node in the quorum must have answered"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h4",{id:"groups"},"Groups"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#group_name"},"{GROUP_NAME}")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The quorum group used to ask other nodes for correct ledger state of the coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of objects")))),(0,l.kt)("h5",{id:"group_name"},"{GROUP_NAME}"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"alias"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Alias of the quorum client (optional)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"baseURL"),(0,l.kt)("td",{parentName:"tr",align:"left"},"BaseURL of the quorum client"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"userName"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Username for basic auth (optional)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"password"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Password for basic auth (optional)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "coordinator": {\n    "stateFilePath": "coordinator.state",\n    "interval": "10s",\n    "powWorkerCount": 0,\n    "checkpoints": {\n      "maxTrackedMessages": 10000\n    },\n    "tipsel": {\n      "minHeaviestBranchUnreferencedMessagesThreshold": 20,\n      "maxHeaviestBranchTipsPerCheckpoint": 10,\n      "randomTipsPerCheckpoint": 3,\n      "heaviestBranchSelectionTimeout": "100ms"\n    },\n    "signing": {\n      "provider": "local",\n      "remoteAddress": "localhost:12345",\n      "retryAmount": 10,\n      "retryTimeout": "2s"\n    },\n    "quorum": {\n      "enabled": false,\n      "groups": {\n        "hornet": [\n          {\n            "alias": "hornet1",\n            "baseURL": "http://hornet1.example.com:14265",\n            "userName": "",\n            "password": ""\n          }\n        ],\n        "bee": [\n          {\n            "alias": "bee1",\n            "baseURL": "http://bee1.example.com:14265",\n            "userName": "",\n            "password": ""\n          }\n        ]\n      },\n      "timeout": "2s"\n    }\n  },\n')),(0,l.kt)("h2",{id:"10-migrator"},"10. Migrator"),(0,l.kt)("p",null,"This part is used in the migration from IOTA 1.0 to IOTA 1.5 (Chrysalis)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"stateFilePath"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Path to the state file of the migrator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"receiptMaxEntries"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The max amount of entries to embed within a receipt"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"queryCooldownPeriod"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The cool down period of the service to ask for new data"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "migrator": {\n    "stateFilePath": "migrator.state",\n    "receiptMaxEntries": 110,\n    "queryCooldownPeriod": "5s"\n  },\n')),(0,l.kt)("h2",{id:"11-receipts"},"11. Receipts"),(0,l.kt)("p",null,"This part was used in the migration from IOTA 1.0 to IOTA 1.5 (Chrysalis)"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#backup"},"backup")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for backup"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#validator"},"validator")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for validator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"backup"},"Backup"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to backup receipts in the backup folder"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"path"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Path to the receipts backup folder"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"validator"},"Validator"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"validate"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to validate receipts"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ignoreSoftErrors"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to ignore soft errors and not panic if one is encountered"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#api"},"api")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for legacy API"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#coordinator"},"coordinator")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for legacy Coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h4",{id:"api"},"Api"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Address of the legacy node API"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"timeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Timeout of API calls"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h4",{id:"coordinator"},"Coordinator"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Address of the legacy coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"merkleTreeDepth"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Depth of the Merkle tree of the coordinator"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "receipts": {\n    "backup": {\n      "enabled": false,\n      "path": "receipts"\n    },\n    "validator": {\n      "validate": false,\n      "ignoreSoftErrors": false,\n      "api": {\n        "address": "http://localhost:14266",\n        "timeout": "5s"\n      },\n      "coordinator": {\n        "address": "UDYXTZBE9GZGPM9SSQV9LTZNDLJIZMPUVVXYXFYVBLIEUHLSEWFTKZZLXYRHHWVQV9MNNX9KZC9D9UZWZ",\n        "merkleTreeDepth": 24\n      }\n    }\n  },\n')),(0,l.kt)("h2",{id:"12-tangle"},"12. Tangle"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"milestoneTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The interval milestone timeout events are fired if no new milestones are received"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "tangle": {\n    "milestoneTimeout": "30s"\n  },\n')),(0,l.kt)("h2",{id:"13-tipsel"},"13. Tipsel"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxDeltaMsgYoungestConeRootIndexToCMI"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum allowed delta value for the YCRI of a given message in relation to the current CMI before it gets lazy"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxDeltaMsgOldestConeRootIndexToCMI"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum allowed delta value between OCRI of a given message in relation to the current CMI before it gets semi-lazy"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"belowMaxDepth"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum allowed delta value for the OCRI of a given message in relation to the current CMI before it gets lazy"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#nonlazy"},"nonLazy")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for tips from the non-lazy pool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#semilazy"},"semiLazy")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for tips from the semi-lazy pool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"nonlazy"},"NonLazy"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"retentionRulesTipsLimit"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum number of current tips for which the retention rules are checked (non-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxReferencedTipAge"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum time a tip remains in the tip pool after it was referenced by the first message (non-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxChildren"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of references by other messages before the tip is removed from the tip pool (non-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"spammerTipsThreshold"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of tips in a tip-pool (non-lazy) before the spammer tries to reduce these"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("h3",{id:"semilazy"},"SemiLazy"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"retentionRulesTipsLimit"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum number of current tips for which the retention rules are checked (semi-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxReferencedTipAge"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum time a tip remains in the tip pool after it was referenced by the first message (semi-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxChildren"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of references by other messages before the tip is removed from the tip pool (semi-lazy)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"spammerTipsThreshold"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of tips in a tip-pool (semi-lazy) before the spammer tries to reduce these"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "tipsel": {\n    "maxDeltaMsgYoungestConeRootIndexToCMI": 8,\n    "maxDeltaMsgOldestConeRootIndexToCMI": 13,\n    "belowMaxDepth": 15,\n    "nonLazy": {\n      "retentionRulesTipsLimit": 100,\n      "maxReferencedTipAge": "3s",\n      "maxChildren": 30,\n      "spammerTipsThreshold": 0\n    },\n    "semiLazy": {\n      "retentionRulesTipsLimit": 20,\n      "maxReferencedTipAge": "3s",\n      "maxChildren": 2,\n      "spammerTipsThreshold": 30\n    }\n  },\n')),(0,l.kt)("h2",{id:"14-node"},"14. Node"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"alias"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The alias to identify a node"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"profile"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The profile the node runs with"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"disablePlugins"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of plugins that shall be disabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enablePlugins"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of plugins that shall be enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "node": {\n    "alias": "Mainnet",\n    "profile": "auto",\n    "disablePlugins": [\n      "Warpsync"\n    ],\n    "enablePlugins": [\n      "Prometheus",\n      "Spammer"\n    ]\n  },\n')),(0,l.kt)("h2",{id:"15-p2p"},"15. P2P"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindMultiAddresses"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind addresses for this node"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#connectionmanager"},"connectionManager")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for connection manager"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#gossip"},"gossip")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for gossip protocol"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"identityPrivateKey"),(0,l.kt)("td",{parentName:"tr",align:"left"},"private key used to derive the node identity (optional)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#database"},"db")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for p2p database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"reconnectInterval"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The time to wait before trying to reconnect to a disconnected peer"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#autopeering"},"autopeering")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for autopeering"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"connectionmanager"},"ConnectionManager"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"highWatermark"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The threshold up on which connections count truncates to the lower watermark"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"lowWatermark"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The minimum connections count to hold after the high watermark was reached"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("h3",{id:"gossip"},"Gossip"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"unknownPeersLimit"),(0,l.kt)("td",{parentName:"tr",align:"left"},"maximum amount of unknown peers a gossip protocol connection is established to"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"streamReadTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The read timeout for subsequent reads from the gossip stream"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"streamWriteTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The write timeout for writes to the gossip stream"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"database"},"Database"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"path"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The path to the p2p database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("h3",{id:"autopeering"},"Autopeering"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the autopeering module listens on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"entryNodes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The list of autopeering entry nodes to use"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"entryNodesPreferIPv6"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Defines if connecting over IPv6 is preferred for entry nodes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"runAsEntryNode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Defines whether the node should act as an autopeering entry node"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "p2p": {\n    "bindMultiAddresses": [\n      "/ip4/0.0.0.0/tcp/15600",\n      "/ip6/::/tcp/15600"\n    ],\n    "connectionManager": {\n      "highWatermark": 10,\n      "lowWatermark": 5\n    },\n    "gossip": {\n      "unknownPeersLimit": 4,\n      "streamReadTimeout": "1m0s",\n      "streamWriteTimeout": "10s"\n    },\n    "identityPrivateKey": "",\n    "db": {\n      "path": "p2pstore"\n    },\n    "reconnectInterval": "30s",\n    "autopeering": {\n      "bindAddress": "0.0.0.0:14626",\n      "entryNodes": [\n        "/dns/lucamoser.ch/udp/14826/autopeering/4H6WV54tB29u8xCcEaMGQMn37LFvM1ynNpp27TTXaqNM",\n        "/dns/entry-hornet-0.h.chrysalis-mainnet.iotaledger.net/udp/14626/autopeering/iotaPHdAn7eueBnXtikZMwhfPXaeGJGXDt4RBuLuGgb",\n        "/dns/entry-hornet-1.h.chrysalis-mainnet.iotaledger.net/udp/14626/autopeering/iotaJJqMd5CQvv1A61coSQCYW9PNT1QKPs7xh2Qg5K2",\n        "/dns/entry-mainnet.tanglebay.com/udp/14626/autopeering/iot4By1FD4pFLrGJ6AAe7YEeSu9RbW9xnPUmxMdQenC"\n      ],\n      "entryNodesPreferIPv6": false,\n      "runAsEntryNode": false\n    }\n  },\n')),(0,l.kt)("h2",{id:"16-logger"},"16. Logger"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"level"),(0,l.kt)("td",{parentName:"tr",align:"left"},'The minimum enabled logging level. Valid values are: "debug", "info", "warn", "error", "dpanic", "panic", "fatal"'),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"disableCaller"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Stops annotating logs with the calling function's file name and line number"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"encoding"),(0,l.kt)("td",{parentName:"tr",align:"left"},'Sets the logger\'s encoding. Valid values are "json" and "console"'),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"outputPaths"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A list of URLs, file paths or stdout/stderr to write logging output to"),(0,l.kt)("td",{parentName:"tr",align:"left"},"array of strings")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "logger": {\n    "level": "info",\n    "disableCaller": true,\n    "encoding": "console",\n    "outputPaths": [\n      "stdout",\n      "hornet.log"\n    ]\n  },\n')),(0,l.kt)("h2",{id:"17-warpsync"},"17. Warpsync"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"advancementRange"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The used advancement range per warpsync checkpoint"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "warpsync": {\n    "advancementRange": 150\n  },\n')),(0,l.kt)("h2",{id:"18-spammer"},"18. Spammer"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"message"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The message to embed within the spam messages"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"index"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The indexation of the message"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"indexSemiLazy"),(0,l.kt)("td",{parentName:"tr",align:"left"},'The indexation of the message if the semi-lazy pool is used (uses "index" if empty)'),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"cpuMaxUsage"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Workers remains idle for a while when cpu usage gets over this limit (0 = disable)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"mpsRateLimit"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The rate limit for the spammer (0 = no limit)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"workers"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of parallel running spammers"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"autostart"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Automatically start the spammer on node startup"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "spammer": {\n    "message": "IOTA - A new dawn",\n    "index": "HORNET Spammer",\n    "indexSemiLazy": "HORNET Spammer Semi-Lazy",\n    "cpuMaxUsage": 0.8,\n    "mpsRateLimit": 0.0,\n    "workers": 0,\n    "autostart": false\n  },\n')),(0,l.kt)("h2",{id:"19-faucet"},"19. Faucet"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of funds the requester receives"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"smallAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of funds the requester receives if the target address has more funds than the faucet amount and less than maximum"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxAddressBalance"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum allowed amount of funds on the target address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maxOutputCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum output count per faucet message"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"indexationMessage"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The faucet transaction indexation payload"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"batchTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum duration for collecting faucet batches"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"powWorkerCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of workers used for calculating PoW when issuing faucet messages"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#website"},"website")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for the faucet website"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")))),(0,l.kt)("h3",{id:"website"},"Website"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the faucet website can be accessed from"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to host the faucet website"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "faucet": {\n    "amount": 10000000,\n    "smallAmount": 1000000,\n    "maxAddressBalance": 20000000,\n    "maxOutputCount": 127,\n    "indexationMessage": "HORNET FAUCET",\n    "batchTimeout": "2s",\n    "powWorkerCount": 0,\n    "website": {\n      "bindAddress": "localhost:8091",\n      "enabled": true\n    }\n  },\n')),(0,l.kt)("h2",{id:"20-mqtt"},"20. MQTT"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Bind address on which the MQTT broker listens on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"wsPort"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Port of the WebSocket MQTT broker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"workerCount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Number of parallel workers the MQTT broker uses to publish messages"),(0,l.kt)("td",{parentName:"tr",align:"left"},"integer")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "mqtt": {\n    "bindAddress": "localhost:1883",\n    "wsPort": 1888,\n    "workerCount": 100\n  },\n')),(0,l.kt)("h2",{id:"21-profiling"},"21. Profiling"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the profiler listens on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "profiling": {\n    "bindAddress": "localhost:6060"\n  },\n')),(0,l.kt)("h2",{id:"22-prometheus"},"22. Prometheus"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bindAddress"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The bind address on which the Prometheus exporter listens on"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#fileservicediscovery"},"fileServiceDiscovery")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Configuration for file service discovery"),(0,l.kt)("td",{parentName:"tr",align:"left"},"object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"databaseMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include database metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"nodeMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include node metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"gossipMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include gossip metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"cachesMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include caches metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"restAPIMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include restAPI metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"migrationMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include migration metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"coordinatorMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include coordinator metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"mqttBrokerMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include MQTT broker metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"debugMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include debug metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"goMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include go metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"processMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include process metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"promhttpMetrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Include promhttp metrics"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")))),(0,l.kt)("h3",{id:"fileservicediscovery"},"FileServiceDiscovery"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"enabled"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether the plugin should write a Prometheus 'file SD' file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"path"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The path where to write the 'file SD' file to"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"target"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The target to write into the 'file SD' file"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "prometheus": {\n    "bindAddress": "localhost:9311",\n    "fileServiceDiscovery": {\n      "enabled": false,\n      "path": "target.json",\n      "target": "localhost:9311"\n    },\n    "databaseMetrics": true,\n    "nodeMetrics": true,\n    "gossipMetrics": true,\n    "cachesMetrics": true,\n    "restAPIMetrics": true,\n    "migrationMetrics": true,\n    "coordinatorMetrics": true,\n    "mqttBrokerMetrics": true,\n    "debugMetrics": false,\n    "goMetrics": false,\n    "processMetrics": false,\n    "promhttpMetrics": false\n  },\n')),(0,l.kt)("h2",{id:"23-debug"},"23. Debug"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"whiteFlagParentsSolidTimeout"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Defines the the maximum duration for the parents to become solid during white flag confirmation API call"),(0,l.kt)("td",{parentName:"tr",align:"left"},"string")))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'  "debug": {\n    "whiteFlagParentsSolidTimeout": "2s"\n  },\n')))}g.isMDXComponent=!0},3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return g}});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),m=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=m(t.components);return n.createElement(o.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),k=m(a),g=r,N=k["".concat(o,".").concat(g)]||k[g]||s[g]||l;return a?n.createElement(N,i(i({ref:e},d),{},{components:a})):n.createElement(N,i({ref:e},d))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"}}]);