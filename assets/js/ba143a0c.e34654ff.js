"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[17639],{2325:function(e,n,a){a.r(n),a.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var t=a(83117),r=a(80102),s=(a(67294),a(3905)),i=a(85317),o=["components"],l={title:"Examples",description:"Official IOTA Wallet Library Software Python examples.",image:"/img/logo/wallet_light.png",keywords:["account","address","python","balance","Chrysalis"]},c=void 0,d={unversionedId:"libraries/python/examples",id:"libraries/python/examples",title:"Examples",description:"Official IOTA Wallet Library Software Python examples.",source:"@site/external/wallet.rs/documentation/docs/libraries/python/examples.mdx",sourceDirName:"libraries/python",slug:"/libraries/python/examples",permalink:"/wallet.rs/libraries/python/examples",editUrl:"https://github.com/iotaledger/wallet.rs/edit/mainnet/external/wallet.rs/documentation/docs/libraries/python/examples.mdx",tags:[],version:"current",frontMatter:{title:"Examples",description:"Official IOTA Wallet Library Software Python examples.",image:"/img/logo/wallet_light.png",keywords:["account","address","python","balance","Chrysalis"]},sidebar:"docs",previous:{title:"getting_started",permalink:"/wallet.rs/libraries/python/getting_started"},next:{title:"api_reference",permalink:"/wallet.rs/libraries/python/api_reference"}},p={},u=[{value:"Account Manager and Individual Accounts",id:"account-manager-and-individual-accounts",level:2},{value:"Accounts",id:"accounts",level:3},{value:"Generating Address(es)",id:"generating-addresses",level:2},{value:"Checking the Balance",id:"checking-the-balance",level:2},{value:"Sending Tokens",id:"sending-tokens",level:2},{value:"Reattachments",id:"reattachments",level:3},{value:"List of Messages (transactions)",id:"list-of-messages-transactions",level:3},{value:"Dust Protection",id:"dust-protection",level:3},{value:"Backup Database",id:"backup-database",level:2},{value:"Restore a Database",id:"restore-a-database",level:2},{value:"Listening to Events",id:"listening-to-events",level:2}],m={toc:u};function h(e){var n=e.components,l=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This section will guide you through several examples using the python binding of the ",(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library. You can also find the code for the examples in the ",(0,s.kt)("inlineCode",{parentName:"p"},"/bindings/python/examples")," folder in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/tree/dev/bindings/python/examples"},"official GitHub repository"),"."),(0,s.kt)("p",null,"All the examples in this section expect you to set your custom password  in the ",(0,s.kt)("em",{parentName:"p"},".env")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'SH_PASSWORD="here is your super secure password"\n')),(0,s.kt)("h2",{id:"account-manager-and-individual-accounts"},"Account Manager and Individual Accounts"),(0,s.kt)("p",null,"You can initialize (open) a secure storage for individual accounts.  The storage is backed up by ",(0,s.kt)("inlineCode",{parentName:"p"},"Stronghold")," by default, using an AccountManager instance.  "),(0,s.kt)("p",null,"The following example creates a new database and account:"),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)  # note: `storage` and `storage_path` have to be declared together\r\n\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\n# mnemonic (seed) should be set only for new storage\r\n# once the storage has been initialized earlier then you should omit this step\r\naccount_manager.store_mnemonic(\"Stronghold\")\r\n"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Storage is initialized under the given path (",(0,s.kt)("inlineCode",{parentName:"li"},"./alice-database"),")"),(0,s.kt)("li",{parentName:"ul"},"The password is set based on your password in ",(0,s.kt)("em",{parentName:"li"},".env")," file ( ",(0,s.kt)("inlineCode",{parentName:"li"},"manager.setStrongholdPassword(process.env.SH_PASSWORD)")," )"),(0,s.kt)("li",{parentName:"ul"},"When you initialize the new database, a Stronghold mnemonic (seed) is automatically generated and stored by default ( ",(0,s.kt)("inlineCode",{parentName:"li"},"manager.storeMnemonic(SignerType.Stronghold)")," )."),(0,s.kt)("li",{parentName:"ul"},"The seed should be set only for the first time. In order to open already initialized database, you can simply use your password.")),(0,s.kt)("p",null,"The storage is encrypted at rest, so you need a strong password and location where to place your storage."),(0,s.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"We highly recommended that you to store your ",(0,s.kt)("inlineCode",{parentName:"p"},"Stronghold")," password encrypted on rest and separated from ",(0,s.kt)("inlineCode",{parentName:"p"},"Stronghold")," snapshots."),(0,s.kt)("p",{parentName:"div"},"Deal with the password with utmost care."))),(0,s.kt)("p",null," The storage comprises two things:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A single file called ",(0,s.kt)("em",{parentName:"li"},"wallet.stronghold")," , which contains ",(0,s.kt)("em",{parentName:"li"},"seed")," and is secured by ",(0,s.kt)("inlineCode",{parentName:"li"},"Stronghold")," and encrypted at rest. The generated seed (mnemonic) serves as a cryptographic key from which all accounts and related addresses are generated."),(0,s.kt)("li",{parentName:"ul"},"Other data used by library that is stored under the ",(0,s.kt)("em",{parentName:"li"},"db")," sub-directory.  The includes account information, generated addresses, fetched messages, etc.  This data is used to speed up some operations, such as account creation, address generation, etc.")),(0,s.kt)("p",null,"One of the key principles behind ",(0,s.kt)("inlineCode",{parentName:"p"},"Stronghold")," based storage is that no one can extract a seed from the storage. You deal with all accounts purely via an ",(0,s.kt)("em",{parentName:"p"},"AccountManager")," instance.  All complexities are hidden under the hood and dealt with securely."),(0,s.kt)("p",null,"If you also want to store a seed somewhere else, you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"AccountManager.generateMnemonic()")," method. This method will generate a random seed, and it can be used before the actual account initialization."),(0,s.kt)("p",null,"You can find detailed information about seed generation at ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#seed"},"Developer Guide to Chrysalis"),"."),(0,s.kt)("h3",{id:"accounts"},"Accounts"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library uses a model of individual accounts to separate individual users and clients from each other. It is possible to generate multiple addresses for each account deterministically."),(0,s.kt)("p",null,"Each account is related to a specific IOTA network (mainnet or testnet), which is referenced by node properties such as node url.  In this example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Chrysalis")," testnet balancer."),(0,s.kt)("p",null,"For more information about ",(0,s.kt)("em",{parentName:"p"},"client_options")," , please refer to ",(0,s.kt)("a",{parentName:"p",href:"/wallet.rs/libraries/python/api_reference#clientoptions"},"Wallet Python API Reference"),"."),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},'# ... continue from prev example 1a\r\n\r\n# general Tangle specific options\r\nclient_options = {\r\n    "nodes": [\r\n        {\r\n            "url": "https://api.thin-hornet-0.h.chrysalis-devnet.iota.cafe",\r\n            "auth": None,\r\n            "disabled": False\r\n        }\r\n    ],\r\n    "local_pow": True\r\n}\r\n\r\n# an account is generated with the given alias via `account_initialiser`\r\naccount_initialiser = account_manager.create_account(client_options)\r\naccount_initialiser.alias(\'Alice\')\r\n\r\n# initialise account based via `account_initialiser`\r\n# store it to db and sync with Tangle\r\naccount = account_initialiser.initialise()\r\nprint(f\'Account created: {account.alias()}\')\r\n'),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Alias")," should be unique, and it can be any string that you see fit. The ",(0,s.kt)("em",{parentName:"p"},"alias")," is usually used to identify the account later on. Each account is also represented by an ",(0,s.kt)("em",{parentName:"p"},"index")," which is incremented by 1 every time new account is created.\nAny account can be then referred to by its ",(0,s.kt)("em",{parentName:"p"},"index")," , ",(0,s.kt)("em",{parentName:"p"},"alias")," or one of its generated ",(0,s.kt)("em",{parentName:"p"},"addresses")," ."),(0,s.kt)("p",null,"Once an account has been created, you retrieve an instance of it using the following methods:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get_account(account_id: str)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get_accounts()")," .")),(0,s.kt)("p",null,"You can get an overview of all available accounts by running the following snippet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'for acc in account_manager.get_accounts():\n  print(f"Account alias: {acc.alias()}; network: {acc.bech32_hrp()}")\n')),(0,s.kt)("p",null,"You can get and instance of a specific account using the ",(0,s.kt)("inlineCode",{parentName:"p"},'account_manager.get_account("ALIAS")'),", replacing ",(0,s.kt)("em",{parentName:"p"},'"ALIAS"')," for the given alias:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'account = account_manager.get_account("Alice")\n')),(0,s.kt)("p",null,"Several API calls can be performed via an ",(0,s.kt)("em",{parentName:"p"},"account")," instance."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"It is a good practice to sync the given ",(0,s.kt)("em",{parentName:"p"},"account")," with the Tangle every time you work with an ",(0,s.kt)("em",{parentName:"p"},"account")," instance to retrieve the latest information available.  You can do this using the ",(0,s.kt)("inlineCode",{parentName:"p"},"account.sync()")," method.  By default, ",(0,s.kt)("inlineCode",{parentName:"p"},"account.sync()")," is performed automatically on ",(0,s.kt)("inlineCode",{parentName:"p"},"send")," , ",(0,s.kt)("inlineCode",{parentName:"p"},"retry")," , ",(0,s.kt)("inlineCode",{parentName:"p"},"reattach")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"promote")," API calls."))),(0,s.kt)("p",null,"The most common methods of ",(0,s.kt)("em",{parentName:"p"},"account")," instance are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.alias()")," : returns an alias of the given account."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.addresses()")," : returns list of addresses related to the account."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.get_unused_address()")," : returns a first unused address."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.is_latest_address_unused()")," : queries the Tangle and returns a ",(0,s.kt)("em",{parentName:"li"},"bool")," whether latest address was already used."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.generate_address()")," : generates a new address for the address index incremented by 1."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.balance()")," : returns the balance for the given account."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"account.sync()")," : syncs the account information with the tangle.")),(0,s.kt)("h2",{id:"generating-addresses"},"Generating Address(es)"),(0,s.kt)("p",null,"Each ",(0,s.kt)("em",{parentName:"p"},"account")," can have multiple ",(0,s.kt)("em",{parentName:"p"},"addresses")," . ",(0,s.kt)("em",{parentName:"p"},"Addresses")," are generated deterministically based on the ",(0,s.kt)("em",{parentName:"p"},"account")," and ",(0,s.kt)("em",{parentName:"p"},"address")," index. This means that the combination of ",(0,s.kt)("em",{parentName:"p"},"account")," and index uniquely identifies the given address."),(0,s.kt)("p",null,"There are two types of addresses, ",(0,s.kt)("em",{parentName:"p"},"internal")," and ",(0,s.kt)("em",{parentName:"p"},"public")," (external), and each set of addresses is independent of each other and has independent ",(0,s.kt)("em",{parentName:"p"},"index")," id."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Public")," addresses are created by ",(0,s.kt)("inlineCode",{parentName:"li"},"account.generateAddress()")," and are indicated as ",(0,s.kt)("inlineCode",{parentName:"li"},"internal=false")," (public)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("em",{parentName:"li"},"Internal")," addresses are also called ",(0,s.kt)("em",{parentName:"li"},"change")," addresses. ",(0,s.kt)("em",{parentName:"li"},"Internal")," addresses are used to store the excess funds and are indicated as ",(0,s.kt)("inlineCode",{parentName:"li"},"internal=true"),".")),(0,s.kt)("p",null,"This approach is also known as a ",(0,s.kt)("em",{parentName:"p"},"BIP32 Hierarchical Deterministic wallet (HD Wallet)"),"."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The IOTA 1.5 (Chrysalis) network supports reusing addresses multiple times."))),(0,s.kt)("p",null,"You can use the following example to generate a new address via an instance of ",(0,s.kt)("em",{parentName:"p"},"account")," which was retrieved using an ",(0,s.kt)("em",{parentName:"p"},"account_manager")," instance:"),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example generates a new address.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\n\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\n# get a specific instance of some account\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()}')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\n# generate new address\r\naddress = account.generate_address()\r\nprint(f'New address: {address}')\r\n\r\n# print all addresses generated so far\r\nprint(\"List of addresses:\")\r\nprint(account.addresses())\r\n\r\n# You can also get the latest unused address\r\nlast_address_obj = account.latest_address()\r\nprint(f\"Last address: {last_address_obj['address']}\")\r\n"),(0,s.kt)("p",null,"Example output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"[{\n        'address': {\n            'inner': 'atoi1qzy79ew8x4hn4dsr0t3j8ce8hdwdrh8xzx85x2gkse6k0fx2jkyaqdgd2rn'\n        },\n        'balance': 0,\n        'key_index': 0,\n        'internal': False,\n        'outputs': []\n    },\n    {\n        'address': {\n            'inner': 'atoi1qzht4m2jt0q50lhlqa786pcx6vardm4xj8za72fezde6tj39acatq5zh2cg'\n        },\n        'balance': 0,\n        'key_index': 1,\n        'internal': False,\n        'outputs': []\n    }\n]\n")),(0,s.kt)("p",null,"There are two human-readable prefixes in IOTA 1.5 network: ",(0,s.kt)("em",{parentName:"p"},"iota")," (mainnet) and ",(0,s.kt)("em",{parentName:"p"},"atoi")," (testnet). If you take a close look at the addresses in the output, you will be able to notice that both of them start with ",(0,s.kt)("em",{parentName:"p"},"atoi")," , and are therefore testnet addresses."),(0,s.kt)("p",null,"You can find detailed information about generating addresses at the ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#addresskey-space"},"Developer Guide to Chrysalis"),"."),(0,s.kt)("h2",{id:"checking-the-balance"},"Checking the Balance"),(0,s.kt)("p",null,"Before we continue further, please visit the ",(0,s.kt)("a",{parentName:"p",href:"https://faucet.chrysalis-devnet.iota.cafe/"},"IOTA testnet faucet service")," and send some tokens to your testnet addresses."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"IOTA Faucet Service",src:a(66363).Z,width:"875",height:"464"})),(0,s.kt)("p",null,"You can use the following example to sync your accounts and retrieve their balances."),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example checks the account balance.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\n\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\n# get a specific instance of some account\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()}')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\n# get total balance for the account\r\nprint(\"Total balance:\")\r\nprint(account.balance())\r\n\r\nprint(\"Balance per individual addresses:\")\r\nprint(account.addresses())\r\n"),(0,s.kt)("p",null,"Example output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"Total balance:\n{\n    'total': 10000000,\n    'available': 10000000,\n    'incoming': 10000000,\n    'outgoing': 0\n}\n\nBalance per individual addresses:\n[{\n        'address': {\n            'inner': 'atoi1qzy79ew8x4hn4dsr0t3j8ce8hdwdrh8xzx85x2gkse6k0fx2jkyaqdgd2rn'\n        },\n        'balance': 0,\n        'key_index': 0,\n        'internal': False,\n        'outputs': []\n    },\n    {\n        'address': {\n            'inner': 'atoi1qzht4m2jt0q50lhlqa786pcx6vardm4xj8za72fezde6tj39acatq5zh2cg'\n        },\n        'balance': 10000000,\n        'key_index': 1,\n        'internal': False,\n        'outputs': [{\n            'transaction_id': '1c88c91fe0a8eed074b5ccdfdad52403d7908d157b231ae1ef28b0e20ba14e8e',\n            'message_id': 'f1575f984f7fda6e9b3e23e96ef3304fcd0ba4ce323af3920856a427fabe1abe',\n            'index': 0,\n            'amount': 10000000,\n            'is_spent': False,\n            'address': {\n                'inner': 'atoi1qzht4m2jt0q50lhlqa786pcx6vardm4xj8za72fezde6tj39acatq5zh2cg'\n            }\n        }]\n    },\n    {\n        'address': {\n            'inner': 'atoi1qpvnsgygzal4vkxhlc0ew7c6c6csnjr72x5rgn3txqswrsa2xfrec8v04f7'\n        },\n        'balance': 0,\n        'key_index': 2,\n        'internal': False,\n        'outputs': []\n    }\n]\n")),(0,s.kt)("p",null,"In the detailed view per individual addresses, there is also ",(0,s.kt)("em",{parentName:"p"},"outputs")," section.  The ",(0,s.kt)("em",{parentName:"p"},"outputs")," shows all the transactions (also known as ",(0,s.kt)("em",{parentName:"p"},"wallet message(s)")," ), which are related to that ",(0,s.kt)("em",{parentName:"p"},"address"),", and therefore account for the balance."),(0,s.kt)("p",null,"You can also check the balance using the ",(0,s.kt)("a",{parentName:"p",href:"https://explorer.iota.org/devnet/addr/atoi1qzht4m2jt0q50lhlqa786pcx6vardm4xj8za72fezde6tj39acatq5zh2cg"},"Tangle Explorer"),"."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"IOTA is based on ",(0,s.kt)("em",{parentName:"p"},"Unspent Transaction Output")," model. You can find a detailed explanation in the ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#unspent-transaction-output-utxo"},"Developer Guide to Chrysalis"),"."))),(0,s.kt)("h2",{id:"sending-tokens"},"Sending Tokens"),(0,s.kt)("p",null,"The process of sending tokens via ",(0,s.kt)("em",{parentName:"p"},"wallet.rs")," can be described as follows:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create instance of ",(0,s.kt)("inlineCode",{parentName:"li"},"iota_wallet.Transfer()")," class with the following mandatory arguments: ",(0,s.kt)("em",{parentName:"li"},"amount"),", ",(0,s.kt)("em",{parentName:"li"},"address")," and ",(0,s.kt)("em",{parentName:"li"},"remainder_value_strategy")," .\nThe ",(0,s.kt)("em",{parentName:"li"},"remainder_value_strategy")," argument can be either:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ReuseAddress")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ChangeAddress")))),(0,s.kt)("li",{parentName:"ol"},"Once you have created an instance of ",(0,s.kt)("inlineCode",{parentName:"li"},"iota_wallet.Transfer()")," , you can send the tokens using the ",(0,s.kt)("inlineCode",{parentName:"li"},"transfer()")," function of the ",(0,s.kt)("em",{parentName:"li"},"Account")," instance.")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"We highly recommend that you sync the account information with the Tangle by running the ",(0,s.kt)("inlineCode",{parentName:"p"},"account.sync().execute()")," method before doing anything with the account. This way you can ensure that you rely on the latest available information."))),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example sends IOTA toens to an address.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\nprint(\"Selecting a specific account\")\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()} selected')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\nprint(f\"Available balance {account.balance()['available']}\")\r\n\r\n# TODO: Replace with the address of your choice!\r\ntransfer = iw.Transfer(\r\n    amount=1_000_000,\r\n    address='atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r',\r\n    remainder_value_strategy='ReuseAddress'\r\n)\r\n\r\n# Propogate the Transfer to Tangle\r\n# and get a response from the Tangle\r\nnode_response = account.transfer(transfer)\r\nprint(\r\n    node_response\r\n)\r\n"),(0,s.kt)("p",null,"The previous snippet should have a similar output to the following JSON object:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{\n    'id': '9d3c401d59b0a87f6fbaa58582bb71e1858d63336421ccbae834821d9be113d3',\n    'version': 1,\n    'parents': ['66009ff08637c3e74340fb9e09e30e3c4453728c857fd425df2d2e0587af6426',\n        '6da392ac35f73594bf5509fb5c3304e972b36313ce98f2cc63def7cde2054b53',\n        '9157b29cbffcd5c9669cf22004fbc557354e5ade7268f5bfe25fbc75ab29e3b1',\n        'bfe860e09350cd3b8db90611e78e03fdda654139a4b34e68e4b1bb07528b2bef'\n    ],\n    'payload_length': 233,\n    'payload': {\n        'transaction': [{\n            'essence': {\n                'regular': {\n                    'inputs': [{\n                        'transaction_id': '692d6660084dd3b6341ef4f761bc8b8bb27ac35bb0b352bfb030f2c80753815b',\n                        'index': 0,\n                        'metadata': {\n                            'transaction_id': '692d6660084dd3b6341ef4f761bc8b8bb27ac35bb0b352bfb030f2c80753815b',\n                            'message_id': 'c6284e0cc2a6383474782d4e6b6cfaf16c1831c8875cca262982782758a248c0',\n                            'index': 0,\n                            'amount': 10000000,\n                            'is_spent': False,\n                            'address': {\n                                'inner': 'atoi1qq24vlx53qdskyfw6940xa2vg55ma5egzyqv6glq23udx3e0zkmmg97cwze'\n                            }\n                        }\n                    }],\n                    'outputs': [{\n                            'address': 'atoi1qq24vlx53qdskyfw6940xa2vg55ma5egzyqv6glq23udx3e0zkmmg97cwze',\n                            'amount': 9000000\n                        },\n                        {\n                            'address': 'atoi1qpvnsgygzal4vkxhlc0ew7c6c6csnjr72x5rgn3txqswrsa2xfrec8v04f7',\n                            'amount': 1000000\n                        }\n                    ],\n                    'payload': None\n                }\n            },\n            'unlock_blocks': [{\n                'signature': {\n                    'public_key': [15... < TRIMMED > ...],\n                    'signature': [210... < TRIMMED > ...]\n                },\n                'reference': None\n            }]\n        }],\n        'milestone': None,\n        'indexation': None\n    },\n    'timestamp': 1615132552,\n    'nonce': 274654,\n    'confirmed': None,\n    'broadcasted': True,\n    'incoming': False,\n    'value': 1000000,\n    'remainder_value': 9000000\n}}\n")),(0,s.kt)("p",null,"This is a ",(0,s.kt)("em",{parentName:"p"},"wallet message")," that fully describes the given transaction."),(0,s.kt)("p",null,"To understand all aspects of messages, you will need to get familiar with concept of ",(0,s.kt)("em",{parentName:"p"},"UTXO")," . You can find detailed information in the ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#unspent-transaction-output-utxo"},"UTXO section in the Developer Guide to Chrysalis"),"."),(0,s.kt)("p",null,"You can double-check the message using ",(0,s.kt)("a",{parentName:"p",href:"https://explorer.iota.org/"},"Tangle Explorer")," using its ",(0,s.kt)("em",{parentName:"p"},"node_response","['id']"),".  Please make sure you select the right network."),(0,s.kt)("p",null,"If you have used the ",(0,s.kt)("em",{parentName:"p"},"ChangeAddress remainder_value_strategy"),", the message will transfer tokens to the target address as well as new ",(0,s.kt)("em",{parentName:"p"},"internal")," address within the given account (",(0,s.kt)("inlineCode",{parentName:"p"},"internal=True"),")."),(0,s.kt)("p",null,"You can find detailed information about messages and payloads in the ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#messages-payloads-and-transactions"},"Developer Guide to Chrysalis"),"."),(0,s.kt)("h3",{id:"reattachments"},"Reattachments"),(0,s.kt)("p",null,"If you need to reattach a message, you should use the ",(0,s.kt)("a",{parentName:"p",href:"/wallet.rs/libraries/python/api_reference#promoteaccount_id-message_id-walletmessagewalletmessage"},(0,s.kt)("inlineCode",{parentName:"a"},"iota_wallet.promote(account_id, message_id)"))," or ",(0,s.kt)("a",{parentName:"p",href:"/wallet.rs/libraries/python/api_reference#reattachmessage_id-walletmessagewalletmessage"},(0,s.kt)("inlineCode",{parentName:"a"},"iota_wallet.reattach(account_id, message_id)"))," methods, sending your ",(0,s.kt)("em",{parentName:"p"},"account_id")," and ",(0,s.kt)("em",{parentName:"p"},"message_id")," as arguments."),(0,s.kt)("h3",{id:"list-of-messages-transactions"},"List of Messages (transactions)"),(0,s.kt)("p",null,"You can query for a list of all particular messages (transactions) related to the given account using ",(0,s.kt)("a",{parentName:"p",href:"/wallet.rs/libraries/python/api_reference#list_messagescount-from-message_type-optional-listwalletmessagewalletmessage"}," ",(0,s.kt)("inlineCode",{parentName:"a"},"account.list_messages()")," ")," method, and the related ",(0,s.kt)("a",{parentName:"p",href:"/wallet.rs/libraries/python/api_reference#message_countmessage_type-optional-int"}," ",(0,s.kt)("inlineCode",{parentName:"a"},"account.message_count()")," ")," method."),(0,s.kt)("p",null,"You can use those methods to check whether a message is confirmed, broadcast, etc. You should always ",(0,s.kt)("em",{parentName:"p"},"Sync")," the account with the Tangle before checking confirmation status."),(0,s.kt)("p",null,"You can use the following example to ",(0,s.kt)("em",{parentName:"p"},"sync")," an ",(0,s.kt)("em",{parentName:"p"},"account")," , and list all the messages related to the ",(0,s.kt)("em",{parentName:"p"},"account")," ."),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example sends IOTA toens to an address.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()} selected')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\nfor ac in account.list_messages():\r\n    print(f\"message {ac['id']}; confirmation status = {ac['confirmed']}'\")\r\n"),(0,s.kt)("h3",{id:"dust-protection"},"Dust Protection"),(0,s.kt)("p",null,"The network uses a ",(0,s.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/guides/dev_guide#dust-protection"},"dust protection")," protocol to prevent malicious actors from spamming the network while also keeping track of the unspent amount ( ",(0,s.kt)("em",{parentName:"p"},"UTXO")," )."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\u201c... micro-transaction below 1Mi of IOTA tokens can be sent to another address if there is already at least 1Mi on that address.\nThat's why we sent 1Mi in the last example to comply with the protection.\u201d"))),(0,s.kt)("p",null,"Dust protection also means you can't leave less than 1Mi on a spent address (leave a dust behind)."),(0,s.kt)("h2",{id:"backup-database"},"Backup Database"),(0,s.kt)("p",null,"Due to security practices that are incorporated in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Stronghold's")," DNA, there's no way to retrieve a seed, as seeds are encrypted at rest.  Therefore, if you're using the default options, backing up the seed storage is a very important task."),(0,s.kt)("p",null,"The following example will guide you in backing up your data in secure files. You can move this file to another app or device, and restore it."),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example backups your data in a secure file.\r\n# You can move this file to another app or device and restore it.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\nbackup_dir_path = './backup'\r\nif not os.path.exists(backup_dir_path):\r\n    os.makedirs(backup_dir_path)\r\nbackup_file_path = account_manager.backup(backup_dir_path, STRONGHOLD_PASSWORD)\r\n\r\nprint(f'Backup path: {backup_file_path}')\r\n"),(0,s.kt)("p",null,"Output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext"},"Backup path: ./backup/2021-03-07T18-24-06-iota-wallet-backup-wallet.stronghold\n")),(0,s.kt)("p",null,"Alternatively, you can create a copy of the ",(0,s.kt)("em",{parentName:"p"},"wallet.stronghold")," file and use it as seed backup. This can be achieved by a daily ",(0,s.kt)("a",{parentName:"p",href:"https://linux.die.net/man/1/crontab"},(0,s.kt)("em",{parentName:"a"},"cronjob")),", ",(0,s.kt)("a",{parentName:"p",href:"https://linux.die.net/man/1/rsync"},(0,s.kt)("em",{parentName:"a"},"rsync"))," or ",(0,s.kt)("a",{parentName:"p",href:"https://linux.die.net/man/1/scp"},(0,s.kt)("em",{parentName:"a"},"scp"))," with a datetime suffix for example."),(0,s.kt)("h2",{id:"restore-a-database"},"Restore a Database"),(0,s.kt)("p",null,"To restore a database via ",(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs"),", you will need to:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create new empty database with a password (without mnemonic seed)"),(0,s.kt)("li",{parentName:"ol"},"Import all accounts from the file that has been backed up earlier")),(0,s.kt)("p",null,"The following example restores a secured backup file:"),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example restores a secured backup file.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database-restored'\r\n)\r\n\r\n# NOTE: In real use cases you need to set the password in a safer way, like getting it from env variables\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\n#  Add the path to the file from example 5-backup.js\r\n#  for example: ./backup/2021-03-04T15-31-04-iota-wallet-backup-wallet.stronghold\r\nbackup_file_path = r'./backup/2021-03-31T14-45-23-iota-wallet-backup-wallet.stronghold'\r\n\r\n# NOTE: In real use cases you need to set the password in a safer way, like getting it from env variables\r\naccount_manager.import_accounts(backup_file_path, STRONGHOLD_PASSWORD)\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()}')\r\n"),(0,s.kt)("p",null,"Since the backup file is just a copy of the original database it can be also be renamed to ",(0,s.kt)("em",{parentName:"p"},"wallet.stronghold")," and opened in a standard way."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"account_manager = iw.AccountManager(\n    storage_path='./alice-database'\n)\naccount_manager.set_stronghold_password(\"password\")\n")),(0,s.kt)("h2",{id:"listening-to-events"},"Listening to Events"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library is able to listen to several supported event. As soon as the event occurs, a provided callback will be triggered."),(0,s.kt)("p",null,"You can add any of the following event listeners:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_balance_change(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_new_transaction(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_confirmation_state_change(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_reattachment(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_broadcast(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_error(callback): id")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"on_stronghold_status_change(callback): id"))),(0,s.kt)("p",null,"Once you have registered an event listener using, the function will return an ",(0,s.kt)("em",{parentName:"p"},"id")," for the listener as a list","[Bytes]",".\nYou can later use this ",(0,s.kt)("em",{parentName:"p"},"id")," to remove a listener by using the corresponding method described below:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_balance_change_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_new_transaction_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_confirmation_state_change_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_reattachment_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_broadcast_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_error_listener(id)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"remove_stronghold_status_change_listener(id)"))),(0,s.kt)("p",null,"The following example set's up a listener for the ",(0,s.kt)("em",{parentName:"p"},"on_balance_change")," event using an event-based pattern:"),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\nimport threading\r\nimport time\r\nimport iota_wallet as iw\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\nresult_available = threading.Event()\r\n\r\n\r\ndef balance_changed_event_processing(event):\r\n    print(f'On balanced changed: {event}')\r\n    result_available.set()\r\n\r\n\r\n# This example shows some events.\r\naccount_manager = iw.AccountManager(\r\n    storage_path='./alice-database'\r\n)\r\n\r\n# NOTE: In real use cases you need to set the password in a safer way, like getting it from env variables\r\naccount_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\naccount = account_manager.get_account('Alice')\r\nprint(f'Account: {account.alias()}')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\n# Get the latest unused address\r\nlast_address_obj = account.latest_address()\r\nprint(f\"Address: {last_address_obj['address']}\")\r\n\r\n# Use the Chrysalis Faucet to send testnet tokens to your address:\r\nprint('Fill your address with the Faucet: https://faucet.tanglekit.de/')\r\n\r\niw.on_balance_change(balance_changed_event_processing)\r\nprint(\"Waiting for external event (on_balance_changed)...\")\r\n\r\n# wait for results to be available before continue\r\n# will not wait longer than 360 seconds\r\nresult_available.wait(timeout=360)\r\n\r\nprint(\"Done.\")\r\n"),(0,s.kt)("p",null,"Expected output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-plaintext"},'Account: Alice\nSyncing...\nAddress: {\'inner\': \'atoi1qquszp0hzfsrgx4vx58dfg4v6eh20d2k3ddfgg9dt5778c2egc9uyw7g457\'}\nFill your address with the Faucet: https://faucet.chrysalis-devnet.iota.cafe/\nWaiting for external event (on_balance_changed)...\nOn balanced changed: {"indexationId":"c3a7a1ab8ba78460954223a704693d088ddd0388681ac6cc1dd964a388d1a619","accountId":"wallet-account://e51a6285ea2d8cbdf5b6da2b85a8344f619d798d869ef4fb88c5fac0e653d6cc","address":"atoi1qquszp0hzfsrgx4vx58dfg4v6eh20d2k3ddfgg9dt5778c2egc9uyw7g457","balanceChange":{"spent":0,"received":10000000}}\nDone.\n')),(0,s.kt)("p",null,"Alternatively, events can be consumed via queue-base pattern as shown in the following example:"),(0,s.kt)(i.Z,{className:"language-python",mdxType:"CodeBlock"},"# Copyright 2020 IOTA Stiftung\r\n# SPDX-License-Identifier: Apache-2.0\r\n\r\n\r\nimport iota_wallet\r\nimport threading\r\nimport queue\r\nimport time\r\nimport os\r\nfrom dotenv import load_dotenv\r\n\r\n# Load the env variables\r\nload_dotenv()\r\n\r\n# Get the stronghold password\r\nSTRONGHOLD_PASSWORD = os.getenv('SH_PASSWORD')\r\n\r\n# This example shows how to listen to on_balance_change event.\r\n\r\n# The queue to store received events\r\nq = queue.Queue()\r\n\r\n\r\ndef worker():\r\n    \"\"\"The worker to process the queued events.\r\n    \"\"\"\r\n    while True:\r\n        item = q.get(True)\r\n        print(f'Get event: {item}')\r\n        q.task_done()\r\n\r\n\r\ndef balance_changed_event_processing(event):\r\n    \"\"\"Processing function when event is received.\r\n    \"\"\"\r\n    print(f'On balanced changed: {event}')\r\n    q.put(event)\r\n\r\n\r\n# Get the acount manager\r\nmanager = iota_wallet.AccountManager(\r\n    storage_path='./alice-database')\r\n\r\n# NOTE: In real use cases you need to set the password in a safer way, like getting it from env variables\r\nmanager.set_stronghold_password(STRONGHOLD_PASSWORD)\r\n\r\n# Get the account\r\naccount = manager.get_account('Alice')\r\nprint(f'Account: {account.alias()}')\r\n\r\n# Always sync before doing anything with the account\r\nprint('Syncing...')\r\nsynced = account.sync().execute()\r\n\r\n# Get the latest unused address\r\nlast_address_obj = account.latest_address()\r\nprint(f\"Address: {last_address_obj['address']}\")\r\n\r\n# turn-on the worker thread\r\nthreading.Thread(target=worker, daemon=True).start()\r\n\r\n# listen to the on_balance_change event\r\niota_wallet.on_balance_change(balance_changed_event_processing)\r\n\r\n# Use the Chrysalis Faucet to send testnet tokens to your address:\r\nprint(\r\n    f\"Fill your Address ({last_address_obj['address']['inner']}) with the Faucet: https://faucet.tanglekit.de/\")\r\nprint(\"To see how the on_balance_change is called, please send tokens to the address in 1 min\")\r\ntime.sleep(60)\r\n\r\n# block until all tasks are done\r\nq.join()\r\nprint('All work completed')\r\n"))}h.isMDXComponent=!0},66363:function(e,n,a){n.Z=a.p+"assets/images/screenshot_faucet-463b151b10627e967d2ba2b79de1db89.png"}}]);