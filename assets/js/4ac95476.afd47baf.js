"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[69626],{23912:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(83117),i=n(80102),o=(n(67294),n(3905)),r=["components"],l={description:"The congestion control algorithm described in this file decides which messages should be processed and gossiped to node's neighbors and in what order.",image:"/img/research-specifications/active-node-buffer-queue-overview.png",slug:"4.6CongestionControl",keywords:["congestion control algorithm","issuance rate","access mana","honest node","malicious node","latest scheduled message"]},s=void 0,d={unversionedId:"4.6 Congestion Control",id:"4.6 Congestion Control",title:"4.6 Congestion Control",description:"The congestion control algorithm described in this file decides which messages should be processed and gossiped to node's neighbors and in what order.",source:"@site/external/IOTA-2.0-Research-Specifications/4.6 Congestion Control.md",sourceDirName:".",slug:"/4.6CongestionControl",permalink:"/IOTA-2.0-Research-Specifications/4.6CongestionControl",editUrl:"https://github.com/iotaledger/IOTA-2.0-Research-Specifications/edit/main/external/IOTA-2.0-Research-Specifications/4.6 Congestion Control.md",tags:[],version:"current",frontMatter:{description:"The congestion control algorithm described in this file decides which messages should be processed and gossiped to node's neighbors and in what order.",image:"/img/research-specifications/active-node-buffer-queue-overview.png",slug:"4.6CongestionControl",keywords:["congestion control algorithm","issuance rate","access mana","honest node","malicious node","latest scheduled message"]},sidebar:"tutorialSidebar",previous:{title:"4.5 Rate Control",permalink:"/IOTA-2.0-Research-Specifications/4.5RateControl"},next:{title:"4.7 Markers",permalink:"/IOTA-2.0-Research-Specifications/4.7Markers"}},u={},p=[{value:"4.6.1 Introduction",id:"461-introduction",level:2},{value:"4.6.1.2 Proposal",id:"4612-proposal",level:3},{value:"4.6.2 Congestion Control Algorithm",id:"462-congestion-control-algorithm",level:2},{value:"4.6.2.1 Outbox Management",id:"4621-outbox-management",level:3},{value:"4.6.2.2 Scheduler",id:"4622-scheduler",level:3},{value:"4.6.2.3 Rate Setting",id:"4623-rate-setting",level:3},{value:"4.6.2.4 Message Blocking and Blacklisting",id:"4624-message-blocking-and-blacklisting",level:3},{value:"4.6.3 Algorithmic Details",id:"463-algorithmic-details",level:2},{value:"4.6.3.1 Protocol Parameters",id:"4631-protocol-parameters",level:3},{value:"4.6.3.2 Local Variables",id:"4632-local-variables",level:3},{value:"4.6.3.3 Built-in Functions",id:"4633-built-in-functions",level:3},{value:"4.6.3.4 Pseudocode",id:"4634-pseudocode",level:3},{value:"<code>Enqueue(msg)</code>",id:"enqueuemsg",level:4},{value:"<code>RateSetting()</code>",id:"ratesetting",level:4},{value:"<code>Schedule()</code>",id:"schedule",level:4},{value:"4.6.3.5 Implementation",id:"4635-implementation",level:3},{value:"4.6.4 Optional and Future Optimizations",id:"464-optional-and-future-optimizations",level:2},{value:"4.6.4.1 Synchronization",id:"4641-synchronization",level:3},{value:"4.6.4.2 Adaptive Minimum Access Mana",id:"4642-adaptive-minimum-access-mana",level:3},{value:"4.6.4.3 Dynamic Scheduling Rate",id:"4643-dynamic-scheduling-rate",level:3}],m={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"46-congestion-control"},"4.6 Congestion Control"),(0,o.kt)("p",null,"This specification provides a solution to deal with network congestion in the IOTA network. The congestion control algorithm described in this file decides which messages should be processed and gossiped to node's neighbors and in what order to do so."),(0,o.kt)("h2",{id:"461-introduction"},"4.6.1 Introduction"),(0,o.kt)("p",null,"Every network has to deal with its intrinsic limited resources in terms of bandwidth and node capabilities (CPU and storage). In this document, we present a congestion control algorithm to regulate the influx of messages in the network with the goal of maximizing throughput (messages/bytes per second) and minimizing delays. Furthermore, the following requirements must be satisfied:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Consistency"),". If a message is written by one honest node, it shall be written by all honest nodes within some delay bound."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Fairness"),". Nodes can obtain a share of the available throughput depending on their access Mana. Throughput is shared in such a way that an attempt to increase the allocation of any node necessarily results in the decrease in the allocation of some other node with an equal or smaller allocation (max-min fairness)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Security"),". Malicious nodes shall be unable to interfere with either of the above requirements.")),(0,o.kt)("p",null,"Further information can be found in our a paper ",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/2005.07778"},"Access Control for Distributed Ledgers in the Internet of Things: A Networking Approach"),"."),(0,o.kt)("p",null,"The Congestion Control specification depends on the following specifications:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/2.4DataFlow"},"2.4 - Data Flow"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/3.3PeerDiscovery"},"3.3 - Peer discovery"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/4.2Timestamps"},"4.2 - Timestamps"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/5.3Mana"},"5.3 - Mana")))),(0,o.kt)("h3",{id:"4612-proposal"},"4.6.1.2 Proposal"),(0,o.kt)("p",null,"In this specification, we present the congestion control algorithm that shall be implemented by all IOTA nodes. Nodes cannot take any advantage by not following the protocol. Conversely, they may eventually be considered as malicious nodes and banned. Our algorithm has three core components: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A scheduling algorithm which ensures fair access for all nodes according to their access Mana."),(0,o.kt)("li",{parentName:"ul"},"A TCP-inspired algorithm for decentralized rate setting to efficiently utilize the available bandwidth while preventing large delays."),(0,o.kt)("li",{parentName:"ul"},"A blacklisting policy to ban malicious nodes.")),(0,o.kt)("h2",{id:"462-congestion-control-algorithm"},"4.6.2 Congestion Control Algorithm"),(0,o.kt)("h3",{id:"4621-outbox-management"},"4.6.2.1 Outbox Management"),(0,o.kt)("p",null,"Once the message has successfully passed the message parser checks and is solid, it is enqueued into the outbox for scheduling (see ",(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/2.4DataFlow"},"Section 2.4 - Data Flow"),"). The outbox is logically split into several queues, each one corresponding to a different node issuing messages. In this section, we describe the operations of message enqueuing (and dequeuing) into (from) the outbox."),(0,o.kt)("p",null,"The enqueuing mechanism includes the following components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Classification"),". The mechanism identifies the queue where the message belongs to according to the node ID of the message issuer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Message enqueuing"),". The message is actually enqueued, queue is sorted by message timestamps in increasing order and counters are updated (e.g., counters for the total number of bytes in the queue)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Message drop"),". In some circumstances, due to network congestion or to ongoing attacks, some messages shall be dropped to guarantee bounded delays and isolate attacker's messages. Specifically, a node shall drop messages in two situations:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"since buffers are of a limited size, if the total number of bytes in all queues exceeds a certain threshold, new incoming messages are dropped;"),(0,o.kt)("li",{parentName:"ul"},"to guarantee the security of the network, if a certain queue exceeds a given threshold, new incoming packets from that specific node ID will be dropped.")))),(0,o.kt)("p",null,"The dequeue mechanism includes the following components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Queue selection"),". A queue is selected according to round robin scheduling algorithm. In particular, we use a modified version of the deficit round robin (DRR) algorithm, and we describe it in Section 3.4.2.2 - Scheduler."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Message dequeuing"),". The first message of the queue is dequeued, and list of active nodes is updated."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"Scheduler management"),". Scheduler counters and pointers are updated.")),(0,o.kt)("h3",{id:"4622-scheduler"},"4.6.2.2 Scheduler"),(0,o.kt)("p",null,"The most critical task is the scheduling algorithm which must guarantee that, for an honest node ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),", the following requirements will be met:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node"),"'s messages will not accumulate indefinitely at any node (i.e., starvation is avoided), so the ",(0,o.kt)("em",{parentName:"li"},"consistency")," requirement will be ensured."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node"),"'s fair share (according to its access Mana) of the network resources are allocated to it, guaranteeing the ",(0,o.kt)("em",{parentName:"li"},"fairness")," requirement."),(0,o.kt)("li",{parentName:"ul"},"Malicious nodes sending above their allowed rate will not interrupt ",(0,o.kt)("inlineCode",{parentName:"li"},"node"),"'s throughput, fulfilling the ",(0,o.kt)("em",{parentName:"li"},"security")," requirement.")),(0,o.kt)("p",null,"We remind the reader that the above requirements are described in Section 3.4.1 - Summary."),(0,o.kt)("p",null,"Although nodes in our setting are capable of more complex and customised behaviour than a typical router in a packet-switched network, our scheduler must still be lightweight and scalable due to the potentially large number of nodes requiring differentiated treatment. It is estimated that over 10,000 nodes operate on the Bitcoin network, and we expect that an even greater number of nodes are likely to be present in the IoT setting. For this reason, we adopt a scheduler based on ",(0,o.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/502236"},"Deficit Round Robin")," (DRR) (the Linux implementation of the ",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc8290"},"FQ-CoDel packet scheduler"),", which is based on DRR, supports anywhere up to 65535 separate queues)."),(0,o.kt)("p",null,"The DRR scans all non-empty queues in sequence. When a non-empty queue is selected, its priority counter (called ",(0,o.kt)("em",{parentName:"p"},"deficit"),") is incremented by a certain value (called ",(0,o.kt)("em",{parentName:"p"},"quantum"),"). Then, the value of the deficit counter is a maximal amount of bytes that can be sent at this turn: if the deficit counter is greater than the weight of the message at the head of the queue, this message can be scheduled and the value of the counter is decremented by this weight. In our implementation, the quantum is proportional to node's access Mana and we add a cap on the maximum deficit that a node can achieve to keep the network latency low. It is also important to mention that the weight of the message can be assigned in such a way that specific messages can be prioritized (low weight) or penalized (large weight); by default, in our mechanism the weight is proportional to the message size measured in bytes. The weight of a message is set by the function ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkCalculator()"),", and additional details can be found in ",(0,o.kt)("a",{parentName:"p",href:"/IOTA-2.0-Research-Specifications/2.4DataFlow"},"Section 2.4 - Data Flow"),"."),(0,o.kt)("p",null,"Here a fundamental remark: ",(0,o.kt)("em",{parentName:"p"},"the network manager sets up a desired maximum (fixed) rate")," ",(0,o.kt)("inlineCode",{parentName:"p"},"SCHEDULING_RATE")," ",(0,o.kt)("em",{parentName:"p"},"at which messages will be scheduled"),", computed in weight (see above) per second. This implies that every message is scheduled after a delay which is equal to the weight (size as default) of the latest scheduled message times the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"SCHEDULING_RATE"),". This rate mostly depends on the degree of decentralization desired: e.g., a larger rate leads to higher throughput but would leave behind slower devices which will fall out of sync."),(0,o.kt)("h3",{id:"4623-rate-setting"},"4.6.2.3 Rate Setting"),(0,o.kt)("p",null,"If all nodes always had messages to issue, i.e., if nodes were continuously willing to issue new messages, the problem of rate setting would be very straightforward: nodes could simply operate at a fixed, assured rate, sharing the total throughput according to the percentage of access Mana owned. The scheduling algorithm would ensure that this rate is enforceable, and that increasing delays or dropped messages are only experienced by misbehaving node. However, it is unrealistic that all nodes will always have messages to issue, and we would like nodes to better utilise network resources, without causing excessive congestion and violating any requirement."),(0,o.kt)("p",null,"We propose a rate setting algorithm inspired by TCP \u2014 each node employs ",(0,o.kt)("a",{parentName:"p",href:"https://https://epubs.siam.org/doi/book/10.1137/1.9781611974225"},"additive increase, multiplicative decrease")," (AIMD) rules to update their issuance rate in response to congestion events. In the case of distributed ledgers, all message traffic passes through all nodes, contrary to the case of traffic typically found in packet switched networks and other traditional network architectures. Under these conditions, local congestion at a node is all that is required to indicate congestion elsewhere in the network. This observation is crucial, as it presents an opportunity for a congestion control algorithm based entirely on local traffic."),(0,o.kt)("p",null,"Our rate setting algorithm outlines the AIMD rules employed by each node to set their issuance rate. Rate updates for a node ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," take place each time a new message is scheduled if the ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," has a non-empty set of its own messages not yet scheduled. Node ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," sets its own local additive-increase variable ",(0,o.kt)("inlineCode",{parentName:"p"},"localIncrease(node)")," based on its access Mana and on a global increase rate parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_INCREASE"),". An appropriate choice of ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_INCREASE")," ensures a conservative global increase rate which does not cause problems even when many nodes increase their rate simultaneously. Nodes wait ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_PAUSE")," seconds after a global multiplicative decrease parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_DECREASE"),", during which there are no further updates made, to allow the reduced rate to take effect and prevent multiple successive decreases. At each update, ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," checks how many of its own messages are in its outbox queue, and responds with a multiplicative decrease if this number is above a threshold, ",(0,o.kt)("inlineCode",{parentName:"p"},"backoff(node)"),", which is proportional to ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),"'s access Mana. If the number of ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),"'s messages in the outbox is below the threshold, ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),"'s issuance rate is incremented by its local increase variable ",(0,o.kt)("inlineCode",{parentName:"p"},"localIncrease(node)"),"."),(0,o.kt)("h3",{id:"4624-message-blocking-and-blacklisting"},"4.6.2.4 Message Blocking and Blacklisting"),(0,o.kt)("p",null,"If an incoming message made the outbox total buffer size to exceed its maximum capacity ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX_BUFFER"),", the same message would be dropped. In our analysis, we set buffers to be large enough to accommodate traffic from all honest nodes."),(0,o.kt)("p",null,"Furthermore, to mitigate spamming actions from malicious nodes, we add an additional constraint: if ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),"'s access Mana-scaled queue length (i.e., queue length divided by node's access Mana) exceeds a given threshold ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX_QUEUE"),", any new incoming packet from ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," will be dropped, hence the node is blacklisted. The attacker is blacklisted for a certain time ",(0,o.kt)("inlineCode",{parentName:"p"},"BLACKLIST_TIME")," during which no messages issued by ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," can be added to the outbox. Please note that it is still possible to receive message from the attacker through solidification requests, which is important in order to guarantee the consistency requirement. Finally, when a node is blacklisted, the blacklister does not increase its own rate for a time ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_QUARANTINE"),", to avoid errors in the perception of the current congestion level."),(0,o.kt)("h2",{id:"463-algorithmic-details"},"4.6.3 Algorithmic Details"),(0,o.kt)("h3",{id:"4631-protocol-parameters"},"4.6.3.1 Protocol Parameters"),(0,o.kt)("p",null,"In line with the previous section, all nodes know the global variables described in Table 4.6.1."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SCHEDULING_RATE")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"clock time interval between subsequent executions of the function ",(0,o.kt)("inlineCode",{parentName:"td"},"Schedule()"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"RATE_SETTING_INCREASE")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"global additive increase parameter")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"RATE_SETTING_DECREASE")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"global multiplicative decrease parameter (larger than 1)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"RATE_SETTING_PAUSE")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"waiting time before next ",(0,o.kt)("inlineCode",{parentName:"td"},"ownID"),"'s rate update after backoff")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"RATE_SETTING_QUARANTINE")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"waiting time before next ",(0,o.kt)("inlineCode",{parentName:"td"},"ownID"),"'s rate update after blacklisting")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MAX_BUFFER")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"maximum buffer size (in bytes)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MAX_QUEUE")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"maximum access Mana-scaled inbox length")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MAX_DEFICIT")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"maximum cap for accumulated deficit")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MAX_RATE")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"maximum rate at which a node can be allowed to issue messages")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MIN_MANA")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"minimum amount of Mana needed to issue messages")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"BLACKLIST_TIME")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"time interval during which no messages from blacklisted nodes are added to the outbox")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Table 4.6.1:")," Global constants."),(0,o.kt)("h3",{id:"4632-local-variables"},"4.6.3.2 Local Variables"),(0,o.kt)("p",null,"Local variables are described in Table 4.6.2."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ownRate")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"issuance rate of ",(0,o.kt)("inlineCode",{parentName:"td"},"ownID")," according to the rate setter")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"activeNode")),(0,o.kt)("td",{parentName:"tr",align:null},"list"),(0,o.kt)("td",{parentName:"tr",align:null},"updated list of nodes having at least one message in the outbox queue (more details in Section 4.6.3.5 - Implementation)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"bufferQueue")),(0,o.kt)("td",{parentName:"tr",align:null},"queue"),(0,o.kt)("td",{parentName:"tr",align:null},"actual outbox queue where messages are ready to be scheduled (more details in Section 4.6.3.5 - Implementation)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"nextID")),(0,o.kt)("td",{parentName:"tr",align:null},"nodeID"),(0,o.kt)("td",{parentName:"tr",align:null},"pointer to the specific queue where next message can be scheduled from")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"mana")),(0,o.kt)("td",{parentName:"tr",align:null},"list"),(0,o.kt)("td",{parentName:"tr",align:null},"contains the ",(0,o.kt)("em",{parentName:"td"},"up-to-date")," (at the time the vector is used) value of the access Mana given a certain ",(0,o.kt)("inlineCode",{parentName:"td"},"nodeId"),". The way in which ",(0,o.kt)("inlineCode",{parentName:"td"},"mana")," is updated is out of the scope of this spec, and further information can be found in ",(0,o.kt)("a",{parentName:"td",href:"/IOTA-2.0-Research-Specifications/5.3Mana"},"Section 5.3 - Mana"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"backoff")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"local threshold for rate setting's backoff")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"localIncrease")),(0,o.kt)("td",{parentName:"tr",align:null},"float"),(0,o.kt)("td",{parentName:"tr",align:null},"local additive increase parameter")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"blacklisted")),(0,o.kt)("td",{parentName:"tr",align:null},"list"),(0,o.kt)("td",{parentName:"tr",align:null},"list of timestamps indicating if a specific ",(0,o.kt)("inlineCode",{parentName:"td"},"nodeId")," is blacklisted. If node is not blacklisted, the entry is ",(0,o.kt)("em",{parentName:"td"},"0"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"pauseUpdates")),(0,o.kt)("td",{parentName:"tr",align:null},"integer"),(0,o.kt)("td",{parentName:"tr",align:null},"time interval during which rate setter is not updated")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"messageWorker")),(0,o.kt)("td",{parentName:"tr",align:null},"list"),(0,o.kt)("td",{parentName:"tr",align:null},"list of messages that ",(0,o.kt)("inlineCode",{parentName:"td"},"ownNode")," issued but are still not part of the outbox")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Table 4.6.2:")," Local variables."),(0,o.kt)("h3",{id:"4633-built-in-functions"},"4.6.3.3 Built-in Functions"),(0,o.kt)("p",null,"Pseudocodes introduced in the next section will use the built-in functions described in Table 4.6.3."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Function"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Len(x)")),(0,o.kt)("td",{parentName:"tr",align:null},"measures the length of a data structure ",(0,o.kt)("inlineCode",{parentName:"td"},"x"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Append(x, y)")),(0,o.kt)("td",{parentName:"tr",align:null},"add a new element ",(0,o.kt)("inlineCode",{parentName:"td"},"y")," to list ",(0,o.kt)("inlineCode",{parentName:"td"},"x"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"WorkCalculator(x)")),(0,o.kt)("td",{parentName:"tr",align:null},"provides the weight of message ",(0,o.kt)("inlineCode",{parentName:"td"},"x"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Sort(x, y)")),(0,o.kt)("td",{parentName:"tr",align:null},"sort list ",(0,o.kt)("inlineCode",{parentName:"td"},"x")," by metric ",(0,o.kt)("inlineCode",{parentName:"td"},"y"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Parents(x)")),(0,o.kt)("td",{parentName:"tr",align:null},"gives the list of parents of a message ",(0,o.kt)("inlineCode",{parentName:"td"},"x"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CurrentTime()")),(0,o.kt)("td",{parentName:"tr",align:null},"current time computed with the local clock")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Execute(x)")),(0,o.kt)("td",{parentName:"tr",align:null},"process and gossip message ",(0,o.kt)("inlineCode",{parentName:"td"},"x"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Pause(x)")),(0,o.kt)("td",{parentName:"tr",align:null},"stop execution of a function for ",(0,o.kt)("inlineCode",{parentName:"td"},"x")," time units")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Table 4.6.3:")," Built-in functions."),(0,o.kt)("h3",{id:"4634-pseudocode"},"4.6.3.4 Pseudocode"),(0,o.kt)("p",null,"The congestion control algorithm follows the ",(0,o.kt)("em",{parentName:"p"},"solidification")," in the data flow: when a new message ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," arrives to the scheduler, the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Enqueue(msg)")," will be triggered in order to properly add ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," to the outbox. At the same time, at regular intervals (given by ",(0,o.kt)("inlineCode",{parentName:"p"},"SCHEDULING_RATE")," times ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkCalculator(x)")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," is the latest scheduled message), the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Schedule()")," picks a new message that has to be gossiped to neighbors and to be added to the local ledger. Simultaneously, ",(0,o.kt)("inlineCode",{parentName:"p"},"RateSetting()")," adjusts the message generation rate of ",(0,o.kt)("inlineCode",{parentName:"p"},"ownID")," according to the network congestion."),(0,o.kt)("h4",{id:"enqueuemsg"},(0,o.kt)("inlineCode",{parentName:"h4"},"Enqueue(msg)")),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"Enqueue(msg)")," adds a new message ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," into the outbox and updates the list of active nodes accordingly. The checks on blacklisting condition (",(0,o.kt)("inlineCode",{parentName:"p"},"blacklisted[nodeID] == FALSE"),") and buffer size (",(0,o.kt)("inlineCode",{parentName:"p"},"Len(bufferQueue) < MAX_BUFFER"),") may be moved to the parser checker for optimization purposes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vbnet"},"### upon arrival of a new message msg (having passed solidification) ###\n\nFUNCTION Enqueue(msg)\n    nodeID = msg.nodeID\n    IF mana[nodeID] > MIN_MANA AND (blacklisted[nodeId] == 0 OR CurrentTime() - blacklisted[nodeID] > BLACKLIST_TIME)\n        blacklisted[nodeId] = 0\n        IF Len(bufferQueue) < MAX_BUFFER\n            IF activeNode[nodeID] != NULL\n                # other messages from nodeID are already in the queue\n                nodeQueue = activeNode[nodeID]\n                IF (Len(nodeQueue) + Len(msg))/mana[nodeID] < MAX_QUEUE\n                    # append msg\n                    Append(bufferQueue, msg)\n                    Sort(bufferQueue, timestamp)\n                ELSE\n                    # blacklist nodeID and pause rate setting updates\n                    blacklisted[nodeID] = CurrentTime()\n                    pauseUpdates = Max(pauseUpdates, RATE_SETTING_QUARANTINE)\n            ELSE\n                # no other messages for nodeID are present in the buffer\n                Append(activeNode, nodeID)\n                activeNode[nodeID].deficit = MAX_DEFICIT\n                Append(bufferQueue, msg)\n")),(0,o.kt)("h4",{id:"ratesetting"},(0,o.kt)("inlineCode",{parentName:"h4"},"RateSetting()")),(0,o.kt)("p",null,"The function ",(0,o.kt)("inlineCode",{parentName:"p"},"RateSetting()")," updates the rate ",(0,o.kt)("inlineCode",{parentName:"p"},"ownRate")," at which messages can be issued by the node. The maximum value that ",(0,o.kt)("inlineCode",{parentName:"p"},"ownRate")," can reach is ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX_RATE"),". At the bootstrap, the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"ownRate")," is initialized by the proportion of access Mana owned by the node times ",(0,o.kt)("inlineCode",{parentName:"p"},"RATE_SETTING_INCREASE"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vbnet"},"FUNCTION RateSetting()\n    # update issueing rate if no recent backoff\n    IF ownRate < MAX_RATE\n        # retrieve message queue of the same node\n        IF Len(bufferQueue[ownID]) / mana[ownID] > backoff\n            ownRate = ownRate / RATE_SETTING_DECREASE\n            pauseUpdates = Max(pauseUpdates, RATE_SETTING_PAUSE)\n        ELSE\n            ownRate += RATE_SETTING_INCREASE * mana[ownID] / Sum(mana)\n")),(0,o.kt)("h4",{id:"schedule"},(0,o.kt)("inlineCode",{parentName:"h4"},"Schedule()")),(0,o.kt)("p",null,"At regular intervals, i.e., every ",(0,o.kt)("inlineCode",{parentName:"p"},"SCHEDULING_RATE")," times ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkCalculator(x)")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," is the latest scheduled message, the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Schedule()")," selects the next message to gossip and process, if at least one message exists in ",(0,o.kt)("inlineCode",{parentName:"p"},"bufferQueue"),". Otherwise, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"NULL")," and the scheduling slot is missed. The local variable ",(0,o.kt)("inlineCode",{parentName:"p"},"pauseUpdates")," is initialized to ",(0,o.kt)("em",{parentName:"p"},"0"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-vbnet"},"FUNCTION msg = Schedule()\n    WHILE TRUE\n        IF Len(bufferQueue) > 0\n            # msg represents the message in the outbox\n            msg = bufferQueue[nextID].head\n            # point to a nodeId with enough deficit, having a valid message\n            WHILE activeNode[nextID].deficit < Weight(msg) OR msg.timestamp > CurrentTime() OR Parents(msg) have not been scheduled\n                activeNode[nextID].deficit += mana[nextID]\n                IF activeNode[nextID].deficit > MAX_DEFICIT\n                    activeNode[nextID].deficit = MAX_DEFICIT\n                nextID++\n            activeNode[nextID].deficit -= Weight(msg)\n            IF activeNode[nextID].deficit < 0\n                activeNode[nextID] = 0\n            # remove scheduled message from queue\n            Remove(bufferQueue[nextID].head)\n            # update list of active nodes\n            IF Len(bufferQueue[nextID]) == 0\n                Remove(activeNode[nextID])\n            # update own rate setting\n            IF pauseUpdates > 0\n                pauseUpdates -= 1\n            ELSE IF Len(messageWorker) > 0\n                RateSetting()\n            Execute(msg)\n        Pause(SCHEDULING_RATE * WorkCalculator(msg))\n")),(0,o.kt)("h3",{id:"4635-implementation"},"4.6.3.5 Implementation"),(0,o.kt)("p",null,"In this section, we describe the main architectural components used to handle the outbox queue, that is ",(0,o.kt)("inlineCode",{parentName:"p"},"activeNode")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bufferQueue")," (see Image 4.6.4). The scope of this section is to provide an insight on how to efficiently implement the above pseudocode."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"activeNode"),": it is a list which includes the node IDs of the nodes having at least one message in the outbox queue. Each node ID in the list points to its oldest message in the outbox buffer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"bufferQueue"),": it is the actual outbox queue. It is possible to build overlapping virtual queues (indicated by colors in the figure) to represent different queues per node. This data structure has a limited fixed size ",(0,o.kt)("inlineCode",{parentName:"li"},"MAX_BUFFER"),", and messages (in each queue) are sorted by timestamp.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://i.imgur.com/Ek5eGef.png"},(0,o.kt)("img",{parentName:"a",src:"https://i.imgur.com/Ek5eGef.png",alt:"activeNode and bufferQueue overview"}))),(0,o.kt)("p",null,"Other information about the hardware implementation of similar scheduling algorithms can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://ieeexplore.ieee.org/document/642834"},"this link"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Image 4.6.4:")," Proposed data structure for the implementation of the congestion control algorithm."),(0,o.kt)("h2",{id:"464-optional-and-future-optimizations"},"4.6.4 Optional and Future Optimizations"),(0,o.kt)("h3",{id:"4641-synchronization"},"4.6.4.1 Synchronization"),(0,o.kt)("p",null,"When the network has a high level of congestion, it may be difficult for an out-of-sync node to synchronize as most of its scheduling rate is consumed by new messages. Hence, it is nice to have a mechanism allowing to schedule messages faster to catch up with the rest of the network under special conditions. "),(0,o.kt)("p",null,"Specifically, consider the following two scenarios:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Node is bootstrapping."),(0,o.kt)("li",{parentName:"ul"},"Node's ",(0,o.kt)("inlineCode",{parentName:"li"},"syncStatus")," flag is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"FALSE")," (see ",(0,o.kt)("a",{parentName:"li",href:"/IOTA-2.0-Research-Specifications/4.2Timestamps"},"Section 4.2 - Timestamp"),").")),(0,o.kt)("p",null,"In either of these scenarios, the node is very far behind the rest of the newtork. In this case, we suggest to bypass the DRR scheduler, and schedule ",(0,o.kt)("em",{parentName:"p"},"solid")," old messages in FIFO order at the largest possible rate the node can process. We repeat that this feature is optional: while it reduces the time needed to synchronize, it is not strictly needed for the correct functioning of the congestion control algorithm."),(0,o.kt)("h3",{id:"4642-adaptive-minimum-access-mana"},"4.6.4.2 Adaptive Minimum Access Mana"),(0,o.kt)("p",null,"Nodes must hold a sufficient amount of access Mana (larger than ",(0,o.kt)("inlineCode",{parentName:"p"},"MIN_MANA"),") to be able to successfully issue new messages. We are currently investigating a way to adapt this threshold over time, depending on the current traffic congestion of the network."),(0,o.kt)("h3",{id:"4643-dynamic-scheduling-rate"},"4.6.4.3 Dynamic Scheduling Rate"),(0,o.kt)("p",null,"In the current proposal, the throughput is preset by the network manager. This value takes into account nodes\u2019 hardware as well as bandwidth capacity. Hardware improvement or protocol optimizations will not result in a performance improvement if the network manager does not change the throughput parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"SCHEDULING_RATE"),". We are currently investigating a way to dynamically adapt the throughput according to the network and protocol characteristics based on neighbors health state."))}c.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,h=m["".concat(s,".").concat(c)]||m[c]||p[c]||o;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);