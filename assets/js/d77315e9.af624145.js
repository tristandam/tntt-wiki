"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[52772],{70300:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return h}});var i=n(83117),r=n(80102),a=(n(67294),n(3905)),s=n(46624),l=["components"],d={title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},o=void 0,c={unversionedId:"verifiable_credentials/create",id:"verifiable_credentials/create",title:"Create a Verifiable Credential",description:"Explain how a VC is created and verified",source:"@site/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",sourceDirName:"verifiable_credentials",slug:"/verifiable_credentials/create",permalink:"/identity.rs/verifiable_credentials/create",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",tags:[],version:"current",frontMatter:{title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},sidebar:"docs",previous:{title:"Overview",permalink:"/identity.rs/verifiable_credentials/overview"},next:{title:"Revocation",permalink:"/identity.rs/verifiable_credentials/revoke"}},u={},h=[{value:"Example",id:"example",level:2}],m={toc:h};function p(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"TODO: Explain how a VC is created and verified."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"This example shows how you can create a Verifiable Credential and validate it. In this example, Alice takes the role of the subject, while we also have an issuer.\nThe issuer signs a UniversityDegreeCredential type verifiable credential with Alice's name and DID.\nThis Verifiable Credential can be verified by anyone, allowing Alice to take control of it and share it with anyone."),(0,a.kt)(s.Z,{nodeReplitLink:"https://repl.it/@IOTAFoundation/create-vc?lite=true",rustContent:'// Copyright 2020-2022 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! A basic example that generates and publishes subject and issuer DID\r\n//! Documents, then creates a Verifiable Credential (vc) specifying claims about the\r\n//! subject, and retrieves information through the CredentialValidator API.\r\n//!\r\n//! cargo run --example account_create_vc\r\n\r\nuse identity::account::Account;\r\nuse identity::account::AccountBuilder;\r\nuse identity::account::IdentitySetup;\r\nuse identity::account::MethodContent;\r\nuse identity::account::Result;\r\n\r\nuse identity::core::json;\r\nuse identity::core::FromJson;\r\nuse identity::core::ToJson;\r\nuse identity::core::Url;\r\nuse identity::credential::Credential;\r\nuse identity::credential::CredentialBuilder;\r\nuse identity::credential::Subject;\r\nuse identity::crypto::ProofOptions;\r\nuse identity::did::DID;\r\nuse identity::iota::CredentialValidationOptions;\r\nuse identity::iota::CredentialValidator;\r\nuse identity::iota::FailFast;\r\n\r\npub async fn create_vc() -> Result<String> {\r\n  // Create an account builder with in-memory storage for simplicity.\r\n  // See `create_did` example to configure Stronghold storage.\r\n  let mut builder: AccountBuilder = Account::builder();\r\n\r\n  // Create an identity for the issuer.\r\n  let mut issuer: Account = builder.create_identity(IdentitySetup::default()).await?;\r\n\r\n  // Add verification method to the issuer.\r\n  issuer\r\n    .update_identity()\r\n    .create_method()\r\n    .content(MethodContent::GenerateEd25519)\r\n    .fragment("issuerKey")\r\n    .apply()\r\n    .await?;\r\n\r\n  // Create an identity for the holder, in this case also the subject.\r\n  let alice: Account = builder.create_identity(IdentitySetup::default()).await?;\r\n\r\n  // Create a credential subject indicating the degree earned by Alice.\r\n  let subject: Subject = Subject::from_json_value(json!({\r\n    "id": alice.document().id(),\r\n    "name": "Alice",\r\n    "degree": {\r\n      "type": "BachelorDegree",\r\n      "name": "Bachelor of Science and Arts",\r\n    },\r\n    "GPA": "4.0",\r\n  }))?;\r\n\r\n  // Build credential using subject above and issuer.\r\n  let mut credential: Credential = CredentialBuilder::default()\r\n    .id(Url::parse("https://example.edu/credentials/3732")?)\r\n    .issuer(Url::parse(issuer.did().as_str())?)\r\n    .type_("UniversityDegreeCredential")\r\n    .subject(subject)\r\n    .build()?;\r\n\r\n  // Sign the Credential with the issuer\'s verification method.\r\n  issuer\r\n    .sign("#issuerKey", &mut credential, ProofOptions::default())\r\n    .await?;\r\n\r\n  println!("Credential JSON > {:#}", credential);\r\n\r\n  // Before sending this credential to the holder the issuer wants to validate that some properties\r\n  // of the credential satisfy their expectations.\r\n\r\n  // Validate the credential\'s signature using the issuer\'s DID Document, the credential\'s semantic structure,\r\n  // that the issuance date is not in the future and that the expiration date is not in the past:\r\n  CredentialValidator::validate(\r\n    &credential,\r\n    &issuer.document(),\r\n    &CredentialValidationOptions::default(),\r\n    FailFast::FirstError,\r\n  )\r\n  .unwrap();\r\n\r\n  println!("VC successfully validated");\r\n\r\n  // The issuer is now sure that the credential they are about to issue satisfies their expectations.\r\n  // The credential is then serialized to JSON and transmitted to the subject in a secure manner.\r\n  // Note that the credential is NOT published to the IOTA Tangle. It is sent and stored off-chain.\r\n  let credential_json: String = credential.to_json()?;\r\n\r\n  Ok(credential_json)\r\n}\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n  // Obtain a JSON representation of a credential issued to us\r\n  let _credential_json: String = create_vc().await?;\r\n  Ok(())\r\n}\r\n',nodeGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/bindings/wasm/examples-account/src/create_vc.ts",rustGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/examples/account/create_vc.rs",mdxType:"CodeSnippet"}))}p.isMDXComponent=!0},46624:function(e,t,n){n.d(t,{Z:function(){return s}});var i=n(86010),r=n(67294),a=n(85317);function s(e){var t=e.nodeReplitLink,n=e.rustContent,s=e.nodeGithubLink,l=e.rustGithubLink,d=r.useState("node"),o=d[0],c=d[1],u=r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",fill:"currentColor",class:"bi bi-box-arrow-up-right",viewBox:"0 0 16 16"},r.createElement("path",{"fill-rule":"evenodd",d:"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}),r.createElement("path",{"fill-rule":"evenodd",d:"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}));return(0,r.useEffect)((function(){var e=localStorage.getItem("lang"),i=e||"node";"node"!==i||t||(i="rust"),"rust"!==i||n||(i="node"),c(i)})),r.createElement("div",null,r.createElement("div",{className:(0,i.Z)("langSelector")},t&&r.createElement("button",{className:(0,i.Z)("button","languageButton","mr-sm",{activeButton:"node"===o,inactiveButton:"node"!==o}),onClick:function(){localStorage.setItem("lang","node"),c("node")}},"Node.js"),n&&r.createElement("button",{className:(0,i.Z)("button","languageButton",{activeButton:"rust"==o,inactiveButton:"rust"!==o}),onClick:function(){localStorage.setItem("lang","rust"),c("rust")}},"Rust")),r.createElement("div",{className:(0,i.Z)("codeSnippetContainer")},"node"===o?r.createElement(r.Fragment,null,r.createElement("iframe",{frameborder:"0",width:"100%",height:"700px",src:t})):r.createElement("div",{className:(0,i.Z)("rustContainer")},r.createElement(a.Z,{className:(0,i.Z)("noMarginBottom"),language:"rust"},n))),r.createElement("div",{className:(0,i.Z)("githubLink")},s&&"node"===o&&r.createElement("a",{href:s,target:"_blank"},"GitHub\xa0",u),l&&"rust"===o&&r.createElement("a",{href:l,target:"_blank"},"GitHub\xa0",u)))}}}]);