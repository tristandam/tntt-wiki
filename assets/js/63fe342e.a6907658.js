"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[11246],{48358:function(e,n,t){t.r(n),t.d(n,{assets:function(){return h},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return g}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),o=t(76018),l=t(71871),u=t(85317),s=["components"],c={title:"Create a Private Tangle",sidebar_label:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",image:"/img/Identity_icon.png",keywords:["Rust","WASM"]},d=void 0,p={unversionedId:"decentralized_identifiers/private_tangle",id:"decentralized_identifiers/private_tangle",title:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/private_tangle.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/private_tangle",permalink:"/identity.rs/decentralized_identifiers/private_tangle",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/private_tangle.mdx",tags:[],version:"current",frontMatter:{title:"Create a Private Tangle",sidebar_label:"Create a Private Tangle",description:"Create a Private Tangle using the IOTA Identity Rust Library or its WASM binding",image:"/img/Identity_icon.png",keywords:["Rust","WASM"]},sidebar:"docs",previous:{title:"Resolve a DID history",permalink:"/identity.rs/decentralized_identifiers/resolve_history"},next:{title:"Overview",permalink:"/identity.rs/verifiable_credentials/overview"}},h={},g=[{value:"Example",id:"example",level:2},{value:"Account Module (Recommended)",id:"account-module-recommended",level:3},{value:"Low-level API",id:"low-level-api",level:3}],m={toc:g};function v(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"This example shows how you can create a DID on a private tangle. You can run it together with a local ",(0,i.kt)("a",{parentName:"p",href:"https://wiki.iota.org/hornet/welcome"},"Hornet node"),"."),(0,i.kt)("h3",{id:"account-module-recommended"},"Account Module (Recommended)"),(0,i.kt)(u.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2022 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! cargo run --example account_config\r\n\r\nuse identity::account::Account;\r\nuse identity::account::AccountBuilder;\r\nuse identity::account::AutoSave;\r\nuse identity::account::IdentitySetup;\r\nuse identity::account::Result;\r\nuse identity::account_storage::MemStore;\r\nuse identity::iota::ClientBuilder;\r\nuse identity::iota::ExplorerUrl;\r\nuse identity::iota_core::IotaDID;\r\nuse identity::iota_core::Network;\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n  pretty_env_logger::init();\r\n\r\n  // Set-up for a private Tangle\r\n  // You can use https://github.com/iotaledger/one-click-tangle for a local setup.\r\n  // The `network_name` needs to match the id of the network or a part of it.\r\n  // As an example we are treating the devnet as a private tangle, so we use `dev`.\r\n  // When running the local setup, we can use `tangle` since the id of the one-click\r\n  // private tangle is `private-tangle`, but we can only use 6 characters.\r\n  // Keep in mind, there are easier ways to change to devnet via `Network::Devnet`\r\n  let network_name = "dev";\r\n  let network = Network::try_from_name(network_name)?;\r\n\r\n  // If you deployed an explorer locally this would usually be `http://127.0.0.1:8082`\r\n  let explorer = ExplorerUrl::parse("https://explorer.iota.org/devnet")?;\r\n\r\n  // In a locally running one-click tangle, this would usually be `http://127.0.0.1:14265`\r\n  let private_node_url = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\r\n\r\n  // Create a new Account with explicit configuration\r\n  let mut builder: AccountBuilder = Account::builder()\r\n    .autosave(AutoSave::Never) // never auto-save. rely on the drop save\r\n    .autosave(AutoSave::Every) // save immediately after every action\r\n    .autosave(AutoSave::Batch(10)) // save after every 10 actions\r\n    .autopublish(true) // publish to the tangle automatically on every update\r\n    .storage(MemStore::new()) // use the default in-memory storage\r\n    .client_builder(\r\n      // Configure a client for the private network\r\n      ClientBuilder::new()\r\n        .network(network.clone())\r\n        .primary_node(private_node_url, None, None)?,\r\n      // set a permanode for the same network\r\n      // .permanode(<permanode_url>, None, None)?\r\n    );\r\n\r\n  // Create an identity and publish it.\r\n  // The created DID will use the network name configured for the client.\r\n  let identity: Account = match builder.create_identity(IdentitySetup::default()).await {\r\n    Ok(identity) => identity,\r\n    Err(err) => {\r\n      eprintln!("[Example] Error: {:?}", err);\r\n      eprintln!("[Example] Is your Tangle node listening on {}?", private_node_url);\r\n      return Ok(());\r\n    }\r\n  };\r\n\r\n  // Prints the Identity Resolver Explorer URL.\r\n  // The entire history can be observed on this page by clicking "Loading History".\r\n  let iota_did: &IotaDID = identity.did();\r\n  println!(\r\n    "[Example] Explore the DID Document = {}",\r\n    explorer.resolver_url(iota_did)?\r\n  );\r\n\r\n  Ok(())\r\n}\r\n'),(0,i.kt)("h3",{id:"low-level-api"},"Low-level API"),(0,i.kt)(o.Z,{groupId:"programming-languages",defaultValue:"rust",values:[{label:"Rust",value:"rust"},{label:"Node.js",value:"nodejs"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,i.kt)(u.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020-2022 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! A basic example that generates and publishes a DID Document\r\n//! to a private tangle.\r\n//! It can be run together with a local hornet node.\r\n//! Refer to https://github.com/iotaledger/one-click-tangle/tree/chrysalis/hornet-private-net\r\n//! for setup instructions.\r\n//!\r\n//! cargo run --example private_tangle\r\n\r\nuse identity::crypto::KeyType;\r\nuse identity::iota::ClientBuilder;\r\nuse identity::iota::DIDMessageEncoding;\r\nuse identity::iota::ExplorerUrl;\r\nuse identity::iota::Receipt;\r\nuse identity::iota_core::Network;\r\nuse identity::prelude::*;\r\n\r\n#[tokio::main]\r\npub async fn main() -> Result<()> {\r\n  // Set-up for private Tangle\r\n  // You can use https://github.com/iotaledger/one-click-tangle for a local setup.\r\n  // The `network_name` needs to match the id of the network or a part of it.\r\n  // As an example we are treating the devnet as a private tangle, so we use `dev`.\r\n  // When running the local setup, we can use `tangle` since the id of the one-click\r\n  // private tangle is `private-tangle`, but we can only use 6 characters.\r\n  // Keep in mind, there are easier ways to change to devnet via `Network::Devnet`\r\n  let network_name = "dev";\r\n  let network = Network::try_from_name(network_name)?;\r\n\r\n  // If you deployed an explorer locally this would usually be `http://127.0.0.1:8082`\r\n  let explorer = ExplorerUrl::parse("https://explorer.iota.org/devnet")?;\r\n\r\n  // In a locally running one-click tangle, this would usually be `http://127.0.0.1:14265`\r\n  let private_node_url = "https://api.lb-0.h.chrysalis-devnet.iota.cafe";\r\n\r\n  // Use DIDMessageEncoding::Json instead to publish plaintext messages to the Tangle for debugging.\r\n  let encoding = DIDMessageEncoding::JsonBrotli;\r\n\r\n  let client: Client = ClientBuilder::new()\r\n    .network(network.clone())\r\n    .encoding(encoding)\r\n    .primary_node(private_node_url, None, None)?\r\n    .build()\r\n    .await?;\r\n\r\n  // Generate a new Ed25519 public/private key pair.\r\n  let keypair: KeyPair = KeyPair::new(KeyType::Ed25519)?;\r\n\r\n  // Create a DID with the network set explicitly.\r\n  let mut document: IotaDocument = IotaDocument::new_with_options(&keypair, Some(client.network().name()), None)?;\r\n\r\n  // Sign the DID Document with the default signing method.\r\n  document.sign_self(keypair.private(), document.default_signing_method()?.id().clone())?;\r\n\r\n  // Publish the DID Document to the Tangle.\r\n  let receipt: Receipt = match client.publish_document(&document).await {\r\n    Ok(receipt) => receipt,\r\n    Err(err) => {\r\n      eprintln!("Error > {:?}", err);\r\n      eprintln!("Is your private Tangle node listening on {}?", private_node_url);\r\n      return Ok(());\r\n    }\r\n  };\r\n\r\n  println!("Publish Receipt > {:#?}", receipt);\r\n\r\n  // Prints the Identity Resolver Explorer URL, the entire history can be observed on this page by "Loading History".\r\n  println!(\r\n    "[Example] Explore the DID Document = {}",\r\n    explorer.resolver_url(document.id())?\r\n  );\r\n\r\n  Ok(())\r\n}\r\n')),(0,i.kt)(l.Z,{value:"nodejs",mdxType:"TabItem"},(0,i.kt)(u.Z,{className:"language-javascript",mdxType:"CodeBlock"},'// Copyright 2020-2022 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport {Client, DIDMessageEncoding, Document, ExplorerUrl, KeyPair, KeyType, Network} from \'@iota/identity-wasm\';\r\n\r\n/**\r\n This example shows how a DID document can be created on a private tangle.\r\n It can be run together with a local hornet node.\r\n Refer to https://github.com/iotaledger/one-click-tangle/tree/chrysalis/hornet-private-net\r\n for setup instructions.\r\n **/\r\nasync function privateTangle(restURL, networkName) {\r\n    // This name needs to match the id of the network or part of it.\r\n    // Since the id of the one-click private tangle is `private-tangle`\r\n    // but we can only use 6 characters, we use just `tangle`.\r\n    const network = Network.tryFromName(networkName || "tangle");\r\n\r\n    // Optionally point to a locally-deployed Tangle explorer.\r\n    const explorer = ExplorerUrl.parse("http://127.0.0.1:8082/");\r\n\r\n    // Create a client instance with a custom configuration to publish messages to our private Tangle.\r\n    const client = await Client.fromConfig({\r\n        network: network,\r\n        // This URL points to the REST API of the locally running hornet node.\r\n        primaryNode: {url: restURL || "http://127.0.0.1:14265/"},\r\n        // Use DIDMessageEncoding.Json instead to publish plaintext messages to the Tangle for debugging.\r\n        encoding: DIDMessageEncoding.JsonBrotli,\r\n    });\r\n\r\n    // Generate a new ed25519 public/private key pair.\r\n    const key = new KeyPair(KeyType.Ed25519);\r\n\r\n    // Create a DID with the network set explicitly.\r\n    // This will result in a DID prefixed by `did:iota:tangle`.\r\n    const doc = new Document(key, network.name());\r\n\r\n    // Sign the DID Document with the generated key.\r\n    doc.signSelf(key, doc.defaultSigningMethod().id());\r\n\r\n    // Publish the Identity to the IOTA Network, this may take a few seconds to complete Proof-of-Work.\r\n    const receipt = await client.publishDocument(doc);\r\n\r\n    // Make sure the DID can be resolved on the private tangle\r\n    const resolved = await client.resolve(doc.id());\r\n\r\n    console.log(`Published the DID document to the private tangle:`);\r\n    console.log(resolved);\r\n    console.log(`Explore the DID Document: ${explorer.resolverUrl(doc.id())}`);\r\n\r\n    // Return the results.\r\n    return {key, resolved, receipt};\r\n}\r\n\r\nexport {privateTangle};\r\n'))))}v.isMDXComponent=!0},71871:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(67294);function a(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},76018:function(e,n,t){t.d(n,{Z:function(){return c}});var r=t(83117),a=t(67294),i=t(5730),o=t(37559),l=t(86010),u="tabItem_LplD";function s(e){var n,t,i,s=e.lazy,c=e.block,d=e.defaultValue,p=e.values,h=e.groupId,g=e.className,m=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=p?p:m.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,o.lx)(v,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===d?d:null!=(n=null!=d?d:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=m[0])?void 0:i.props.value;if(null!==f&&!v.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.UB)(),k=w.tabGroupChoices,b=w.setTabGroupChoices,D=(0,a.useState)(f),_=D[0],I=D[1],x=[],T=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var E=k[h];null!=E&&E!==_&&v.some((function(e){return e.value===E}))&&I(E)}var N=function(e){var n=e.currentTarget,t=x.indexOf(n),r=v[t].value;r!==_&&(T(n),I(r),null!=h&&b(h,r))},A=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=x.indexOf(e.currentTarget)+1;t=x[r]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;t=x[a]||x[x.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},g)},v.map((function(e){var n=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:function(e){return x.push(e)},onKeyDown:A,onFocus:N,onClick:N},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":_===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(m.filter((function(e){return e.props.value===_}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==_})}))))}function c(e){var n=(0,i.Z)();return a.createElement(s,(0,r.Z)({key:String(n)},e))}}}]);