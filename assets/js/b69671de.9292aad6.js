"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[46164],{45523:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),o=["components"],s={description:"The basic principle of calling a view is similar to sending a request to the smart contract. The essential difference is that calling a view does not constitute an asynchronous transaction, it is just a direct synchronous call to the view entry point function, exposed by the smart contract.",image:"/img/tutorial/call_view.png",keywords:["testing","solo","views","call","synchronous","entry points"]},l=void 0,c={unversionedId:"guide/solo/view-sc",id:"guide/solo/view-sc",title:"view-sc",description:"The basic principle of calling a view is similar to sending a request to the smart contract. The essential difference is that calling a view does not constitute an asynchronous transaction, it is just a direct synchronous call to the view entry point function, exposed by the smart contract.",source:"@site/external/wasp/documentation/docs/guide/solo/view-sc.md",sourceDirName:"guide/solo",slug:"/guide/solo/view-sc",permalink:"/smart-contracts/guide/solo/view-sc",editUrl:"https://github.com/iotaledger/wasp/edit/develop/external/wasp/documentation/docs/guide/solo/view-sc.md",tags:[],version:"current",frontMatter:{description:"The basic principle of calling a view is similar to sending a request to the smart contract. The essential difference is that calling a view does not constitute an asynchronous transaction, it is just a direct synchronous call to the view entry point function, exposed by the smart contract.",image:"/img/tutorial/call_view.png",keywords:["testing","solo","views","call","synchronous","entry points"]},sidebar:"tutorialSidebar",previous:{title:"invoking-sc",permalink:"/smart-contracts/guide/solo/invoking-sc"},next:{title:"error-handling",permalink:"/smart-contracts/guide/solo/error-handling"}},p={},u=[{value:"Decoding Results Returned by <em>PostRequestSync</em> and <em>CallView</em>",id:"decoding-results-returned-by-postrequestsync-and-callview",level:2}],d={toc:u};function m(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"calling-a-view"},"Calling a View"),(0,i.kt)("p",null,"The following snippet shows how to call the view entry point ",(0,i.kt)("inlineCode",{parentName:"p"},"getString")," of the\nsmart contract ",(0,i.kt)("inlineCode",{parentName:"p"},"example1")," without parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'res, err := chain.CallView("example1", "getString")\n')),(0,i.kt)("p",null,"The call returns both a collection of key/value pairs ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," and an error result\n",(0,i.kt)("inlineCode",{parentName:"p"},"err")," in the typical Go fashion."),(0,i.kt)("p",null,(0,i.kt)("a",{target:"_blank",href:n(94401).Z},(0,i.kt)("img",{alt:"Calling a view process",src:n(77720).Z,width:"862",height:"452"}))),(0,i.kt)("p",null,"The basic principle of calling a view is similar to sending a request to the\nsmart contract. The essential difference is that calling a view does not\nconstitute an asynchronous transaction, it is just a direct synchronous\ncall to the view entry point function, exposed by the smart contract."),(0,i.kt)("p",null,"Therefore, calling a view doesn't involve any token transfers. Sending a\nrequest (a transaction) to a view entry point will result in an exception. It\nwill return all attached tokens to the sender (minus fees, if any)."),(0,i.kt)("p",null,"Views are used to retrieve information about the state of the smart contract,\nfor example to display the information on a website. Certain ",(0,i.kt)("em",{parentName:"p"},"Solo")," methods such\nas ",(0,i.kt)("inlineCode",{parentName:"p"},"chain.GetInfo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chain.GetFeeInfo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"chain.GetTotalAssets")," call views of\nthe core smart contracts behind the scenes to retrieve the information about the\nchain or a specific smart contract."),(0,i.kt)("h2",{id:"decoding-results-returned-by-postrequestsync-and-callview"},"Decoding Results Returned by ",(0,i.kt)("em",{parentName:"h2"},"PostRequestSync")," and ",(0,i.kt)("em",{parentName:"h2"},"CallView")),(0,i.kt)("p",null,"The following is a specific technicality of the Go environment of ",(0,i.kt)("em",{parentName:"p"},"Solo"),"."),(0,i.kt)("p",null,"The result returned by the call to an entry point from the ",(0,i.kt)("em",{parentName:"p"},"Solo")," environment\nis in the form of key/value pairs, the ",(0,i.kt)("inlineCode",{parentName:"p"},"dict.Dict")," type. It is an alias of ",(0,i.kt)("inlineCode",{parentName:"p"},"map[string][]byte"),".\nThe ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/master/packages/kv/dict/dict.go"},"dict.Dict"),"\npackage implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"kv.KVStore")," interface and provides a lot of useful\nfunctions to handle this form of key/value storage."),(0,i.kt)("p",null,"Since view calls are synchronous, in normal smart contracts operations one can only retrieve\nresults returned by view calls. Sending a request to a smart\ncontract is normally an asynchronous operation, and the caller cannot retrieve\nthe result. However, in the ",(0,i.kt)("em",{parentName:"p"},"Solo")," environment, the call to ",(0,i.kt)("inlineCode",{parentName:"p"},"PostRequestSync")," is\nsynchronous, and the caller can inspect the result: this is a convenient\ndifference between the mocked ",(0,i.kt)("em",{parentName:"p"},"Solo")," environment, and the distributed UTXO\nLedger used by Wasp nodes. It can be used to make assertions about the results\nof a call in the tests."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"TestTutorial3")," example ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," is a dictionary where keys and values are binary slices.\nThe following fragment creates object ",(0,i.kt)("inlineCode",{parentName:"p"},"par")," which offer all kinds of useful function to take\nand decode key/value pairs in the ",(0,i.kt)("inlineCode",{parentName:"p"},"kv.KVStoreReader")," interface (the logger is used to log the\ndata conversion and any errors that may occur). The second statement takes the value of the key ",(0,i.kt)("inlineCode",{parentName:"p"},"paramString")," from the key/value store and attempts\nto decode it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". It panics if the key does not exist, or the data conversion fails."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},' par := kvdecoder.New(res, chain.Log)\n returnedString := par.MustGetString("paramString")\n')))}m.isMDXComponent=!0},94401:function(e,t,n){t.Z=n.p+"assets/files/call_view-2dd39e42cb400dd55500a74e6b066b46.png"},77720:function(e,t,n){t.Z=n.p+"assets/images/call_view-2dd39e42cb400dd55500a74e6b066b46.png"},3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);