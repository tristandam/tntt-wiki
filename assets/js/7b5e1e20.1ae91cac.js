"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[30387],{46056:function(e,t,o){o.r(t),o.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return s},metadata:function(){return a},toc:function(){return p}});var r=o(83117),n=o(80102),c=(o(67294),o(3905)),i=["components"],s={description:"The `blocklog` contract is to keep track of the blocks of requests that were processed by the chain. It also provides views to get request status, receipts, block information, or events.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","blocklog","views","information","request status","receipts","events","reference"]},l=void 0,a={unversionedId:"guide/core_concepts/core_contracts/blocklog",id:"guide/core_concepts/core_contracts/blocklog",title:"blocklog",description:"The `blocklog` contract is to keep track of the blocks of requests that were processed by the chain. It also provides views to get request status, receipts, block information, or events.",source:"@site/external/wasp/documentation/docs/guide/core_concepts/core_contracts/blocklog.md",sourceDirName:"guide/core_concepts/core_contracts",slug:"/guide/core_concepts/core_contracts/blocklog",permalink:"/smart-contracts/guide/core_concepts/core_contracts/blocklog",editUrl:"https://github.com/iotaledger/wasp/edit/develop/external/wasp/documentation/docs/guide/core_concepts/core_contracts/blocklog.md",tags:[],version:"current",frontMatter:{description:"The `blocklog` contract is to keep track of the blocks of requests that were processed by the chain. It also provides views to get request status, receipts, block information, or events.",image:"/img/logo/WASP_logo_dark.png",keywords:["core contracts","blocklog","views","information","request status","receipts","events","reference"]},sidebar:"tutorialSidebar",previous:{title:"blob",permalink:"/smart-contracts/guide/core_concepts/core_contracts/blob"},next:{title:"governance",permalink:"/smart-contracts/guide/core_concepts/core_contracts/governance"}},u={},p=[{value:"Entry Points",id:"entry-points",level:2},{value:"Views",id:"views",level:2},{value:"viewGetBlockInfo",id:"viewgetblockinfo",level:3},{value:"viewGetLatestBlockInfo",id:"viewgetlatestblockinfo",level:3},{value:"viewGetRequestLogRecord",id:"viewgetrequestlogrecord",level:3},{value:"viewGetRequestLogRecordsForBlock",id:"viewgetrequestlogrecordsforblock",level:3},{value:"viewGetRequestIDsForBlock",id:"viewgetrequestidsforblock",level:3},{value:"viewIsRequestProcessed",id:"viewisrequestprocessed",level:3},{value:"viewGetEventsForRequest",id:"viewgeteventsforrequest",level:3},{value:"viewGetEventsForBlock",id:"viewgeteventsforblock",level:3},{value:"viewGetEventsForContract",id:"viewgeteventsforcontract",level:3}],d={toc:p};function v(e){var t=e.components,o=(0,n.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"the-blocklog-contract"},"The ",(0,c.kt)("inlineCode",{parentName:"h1"},"blocklog")," Contract"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"blocklog")," contract is one of the ",(0,c.kt)("a",{parentName:"p",href:"/smart-contracts/guide/core_concepts/core_contracts/overview"},"core contracts")," on each IOTA Smart Contracts chain."),(0,c.kt)("p",null,"The function of the ",(0,c.kt)("inlineCode",{parentName:"p"},"blocklog")," contract is to keep track of the blocks of\nrequests that were processed by the chain."),(0,c.kt)("p",null,"It provides views to get request status or receipts, block information, or events (per request / block / smart contract)."),(0,c.kt)("h2",{id:"entry-points"},"Entry Points"),(0,c.kt)("p",null,"The ",(0,c.kt)("inlineCode",{parentName:"p"},"blocklog")," core contract does not contain any entry points which modify its\nstate."),(0,c.kt)("p",null,"The only way to modify the ",(0,c.kt)("inlineCode",{parentName:"p"},"blocklog")," state is by submitting requests for\nprocessing to the chain."),(0,c.kt)("h2",{id:"views"},"Views"),(0,c.kt)("h3",{id:"viewgetblockinfo"},"viewGetBlockInfo"),(0,c.kt)("p",null,"Returns the data of the block in the chain with specified index."),(0,c.kt)("h3",{id:"viewgetlatestblockinfo"},"viewGetLatestBlockInfo"),(0,c.kt)("p",null,"Returns the index and data of the latest block in the chain."),(0,c.kt)("h3",{id:"viewgetrequestlogrecord"},"viewGetRequestLogRecord"),(0,c.kt)("p",null,"Returns the data, block index, and request index of the specified request."),(0,c.kt)("h3",{id:"viewgetrequestlogrecordsforblock"},"viewGetRequestLogRecordsForBlock"),(0,c.kt)("p",null,"Returns the data, block index, and request index of all requests in the block with the specified block index."),(0,c.kt)("h3",{id:"viewgetrequestidsforblock"},"viewGetRequestIDsForBlock"),(0,c.kt)("p",null,"Returns the IDs of all requests in the block with the specified block index."),(0,c.kt)("h3",{id:"viewisrequestprocessed"},"viewIsRequestProcessed"),(0,c.kt)("p",null,"Returns whether a request with specified ID has been processed."),(0,c.kt)("h3",{id:"viewgeteventsforrequest"},"viewGetEventsForRequest"),(0,c.kt)("p",null,"Returns a list of events for a given request."),(0,c.kt)("h3",{id:"viewgeteventsforblock"},"viewGetEventsForBlock"),(0,c.kt)("p",null,"Returns a list of events for a given block."),(0,c.kt)("h3",{id:"viewgeteventsforcontract"},"viewGetEventsForContract"),(0,c.kt)("p",null,"Returns a list of events for a given smart contract."))}v.isMDXComponent=!0},3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return v}});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},c=Object.keys(e);for(r=0;r<c.length;r++)o=c[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)o=c[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),a=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=a(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=a(o),v=n,f=d["".concat(l,".").concat(v)]||d[v]||p[v]||c;return o?r.createElement(f,i(i({ref:t},u),{},{components:o})):r.createElement(f,i({ref:t},u))}));function v(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=o.length,i=new Array(c);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var a=2;a<c;a++)i[a]=o[a];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"}}]);