"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[40240],{42189:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return v}});var i=n(83117),r=n(80102),a=(n(67294),n(3905)),o=n(46624),l=["components"],s={title:"Verifiable Credential Revocation",sidebar_label:"Revocation",description:"Explain how a VC is revoked",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","revoke"]},d=void 0,u={unversionedId:"verifiable_credentials/revoke",id:"verifiable_credentials/revoke",title:"Verifiable Credential Revocation",description:"Explain how a VC is revoked",source:"@site/external/identity.rs/documentation/docs/verifiable_credentials/revoke.mdx",sourceDirName:"verifiable_credentials",slug:"/verifiable_credentials/revoke",permalink:"/identity.rs/verifiable_credentials/revoke",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/verifiable_credentials/revoke.mdx",tags:[],version:"current",frontMatter:{title:"Verifiable Credential Revocation",sidebar_label:"Revocation",description:"Explain how a VC is revoked",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","revoke"]},sidebar:"docs",previous:{title:"Create and Sign",permalink:"/identity.rs/verifiable_credentials/create"},next:{title:"Verifiable Presentations",permalink:"/identity.rs/verifiable_credentials/verifiable_presentations"}},c={},v=[{value:"Example",id:"example",level:2}],m={toc:v};function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"TODO: Explain how Verifiable Credentials are revoked using ",(0,a.kt)("inlineCode",{parentName:"p"},"credentialStatus")," and e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"RevocationList2020"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"This example shows how you can revoke a ",(0,a.kt)("a",{parentName:"p",href:"overview"},"Verifiable Credential(VC)")," by removing a verification method (public key) from the DID Document of the Issuer. This means the VC can no longer be validated. This would invalidate every VC signed with the same public key, meaning the Issuer would have to sign every VC with a different key."),(0,a.kt)(o.Z,{nodeReplitLink:"https://repl.it/@IOTAFoundation/revoke-vc?lite=true",rustContent:'// Copyright 2020-2022 IOTA Stiftung\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n//! This example shows how to revoke a verifiable credential.\r\n//!\r\n//! The Verifiable Credential is revoked by actually removing a verification method (public key)\r\n//! from the DID Document of the Issuer.\r\n//! As such, the Verifiable Credential can no longer be validated.\r\n//! This would invalidate every Verifiable Credential signed with the same public key, therefore the\r\n//! issuer would have to sign every VC with a different key.\r\n//!\r\n//! cargo run --example account_revoke_vc\r\n\r\nuse identity::account::Account;\r\nuse identity::account::AccountBuilder;\r\nuse identity::account::IdentitySetup;\r\nuse identity::account::MethodContent;\r\nuse identity::account::Result;\r\nuse identity::core::json;\r\nuse identity::core::FromJson;\r\nuse identity::core::Url;\r\nuse identity::credential::Credential;\r\nuse identity::credential::CredentialBuilder;\r\nuse identity::credential::Subject;\r\nuse identity::crypto::ProofOptions;\r\nuse identity::did::DID;\r\nuse identity::iota::CredentialValidationOptions;\r\nuse identity::iota::CredentialValidator;\r\nuse identity::iota::ResolvedIotaDocument;\r\nuse identity::iota::Resolver;\r\n\r\n#[tokio::main]\r\nasync fn main() -> Result<()> {\r\n  // ===========================================================================\r\n  // Create a Verifiable Credential.\r\n  // ===========================================================================\r\n\r\n  // Create an account builder with in-memory storage for simplicity.\r\n  // See `create_did` example to configure Stronghold storage.\r\n  let mut builder: AccountBuilder = Account::builder();\r\n\r\n  // Create an identity for the issuer.\r\n  let mut issuer: Account = builder.create_identity(IdentitySetup::default()).await?;\r\n\r\n  // Add a dedicated verification method to the issuer, with which to sign credentials.\r\n  issuer\r\n    .update_identity()\r\n    .create_method()\r\n    .content(MethodContent::GenerateEd25519)\r\n    .fragment("key-1")\r\n    .apply()\r\n    .await?;\r\n\r\n  // Create a credential subject indicating the degree earned by Alice.\r\n  let subject: Subject = Subject::from_json_value(json!({\r\n    "id": "did:iota:B8DucnzULJ9E8cmaReYoePU2b7UKE9WKxyEVov8tQA7H",\r\n    "name": "Alice",\r\n    "degree": "Bachelor of Science and Arts",\r\n    "GPA": "4.0",\r\n  }))?;\r\n\r\n  // Build credential using subject above and issuer.\r\n  let mut credential: Credential = CredentialBuilder::default()\r\n    .id(Url::parse("https://example.edu/credentials/3732")?)\r\n    .issuer(Url::parse(issuer.did().as_str())?)\r\n    .type_("UniversityDegreeCredential")\r\n    .subject(subject)\r\n    .build()?;\r\n\r\n  // Sign the Credential with the issuer\'s verification method.\r\n  issuer.sign("#key-1", &mut credential, ProofOptions::default()).await?;\r\n\r\n  // ===========================================================================\r\n  // Revoke the Verifiable Credential.\r\n  // ===========================================================================\r\n\r\n  // Remove the public key that signed the VC from the issuer\'s DID document\r\n  // This effectively revokes the VC as it will no longer be able to be verified.\r\n  issuer\r\n    .update_identity()\r\n    .delete_method()\r\n    .fragment("key-1")\r\n    .apply()\r\n    .await?;\r\n\r\n  // Check the verifiable credential is revoked.\r\n  let resolver: Resolver = Resolver::new().await?;\r\n  let resolved_issuer_doc: ResolvedIotaDocument = resolver.resolve_credential_issuer(&credential).await?;\r\n  let validation_result = CredentialValidator::validate(\r\n    &credential,\r\n    &resolved_issuer_doc,\r\n    &CredentialValidationOptions::default(),\r\n    identity::iota::FailFast::FirstError,\r\n  );\r\n\r\n  println!("VC validation result: {:?}", validation_result);\r\n  assert!(validation_result.is_err());\r\n  println!("Credential successfully revoked!");\r\n\r\n  Ok(())\r\n}\r\n',nodeGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/bindings/wasm/examples-account/src/revoke_vc.ts",rustGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/examples/account/revoke_vc.rs",mdxType:"CodeSnippet"}))}h.isMDXComponent=!0},46624:function(e,t,n){n.d(t,{Z:function(){return o}});var i=n(86010),r=n(67294),a=n(85317);function o(e){var t=e.nodeReplitLink,n=e.rustContent,o=e.nodeGithubLink,l=e.rustGithubLink,s=r.useState("node"),d=s[0],u=s[1],c=r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",fill:"currentColor",class:"bi bi-box-arrow-up-right",viewBox:"0 0 16 16"},r.createElement("path",{"fill-rule":"evenodd",d:"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}),r.createElement("path",{"fill-rule":"evenodd",d:"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}));return(0,r.useEffect)((function(){var e=localStorage.getItem("lang"),i=e||"node";"node"!==i||t||(i="rust"),"rust"!==i||n||(i="node"),u(i)})),r.createElement("div",null,r.createElement("div",{className:(0,i.Z)("langSelector")},t&&r.createElement("button",{className:(0,i.Z)("button","languageButton","mr-sm",{activeButton:"node"===d,inactiveButton:"node"!==d}),onClick:function(){localStorage.setItem("lang","node"),u("node")}},"Node.js"),n&&r.createElement("button",{className:(0,i.Z)("button","languageButton",{activeButton:"rust"==d,inactiveButton:"rust"!==d}),onClick:function(){localStorage.setItem("lang","rust"),u("rust")}},"Rust")),r.createElement("div",{className:(0,i.Z)("codeSnippetContainer")},"node"===d?r.createElement(r.Fragment,null,r.createElement("iframe",{frameborder:"0",width:"100%",height:"700px",src:t})):r.createElement("div",{className:(0,i.Z)("rustContainer")},r.createElement(a.Z,{className:(0,i.Z)("noMarginBottom"),language:"rust"},n))),r.createElement("div",{className:(0,i.Z)("githubLink")},o&&"node"===d&&r.createElement("a",{href:o,target:"_blank"},"GitHub\xa0",c),l&&"rust"===d&&r.createElement("a",{href:l,target:"_blank"},"GitHub\xa0",c)))}}}]);